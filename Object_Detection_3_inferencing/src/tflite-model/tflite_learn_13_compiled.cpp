/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 22.02.2024 09:11:23

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238544;
#else
constexpr int kTensorArenaSize = 237520;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039077741093933582, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 20274, -32596, -29419, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00025151873705908656, 0.00018340817769058049, 0.00018261680088471621, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 88,38,98,-67,-44,22,7,13,9,7,21,-23,14,-35,66,10,-43,-2,83,101,-10,5,11,-55,-87,98,-29,0,127,31,-47,4, 
  /* [1][0][][] */ 16,-20,-62,30,4,115,-15,4,110,-109,6,-56,-99,91,23,-36,86,-46,-5,-110,-85,15,104,73,31,1,3,-5,-127,-49,12,-31, 
  /* [2][0][][] */ -94,69,-64,73,73,-33,-26,99,68,34,110,4,-127,-69,78,103,-64,-45,19,-93,64,100,-31,-86,82,-67,-14,-94,-59,-64,96,-25, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0055133732967078686, 0.0040203677490353584, 0.0040030204690992832, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 1945, 265, 41, 308, 265, 536, -24, 314, 410, 1305, 273, -465, 1734, -269, -14, 150, 11, -143, 1198, 408, -254, 242, 334, 364, 260, 1225, -418, -441, 1592, 63, 505, 181, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 8.8500099082011729e-05, 5.2097562729613855e-05, 5.8596713643055409e-05, 6.0826874687336385e-05, 5.1934279326815158e-05, 7.011849811533466e-05, 8.4615778177976608e-05, 5.6566201237728819e-05, 7.2537062806077302e-05, 6.5924883529078215e-05, 7.1445945650339127e-05, 5.7225839555030689e-05, 7.8751523687969893e-05, 5.2262334065744653e-05, 6.3146035245154053e-05, 5.7595196267357096e-05, 5.5463646276621148e-05, 6.1236969486344606e-05, 5.6201122788479552e-05, 6.0938331444049254e-05, 5.5562431953148916e-05, 5.8038469433085993e-05, 8.109506597975269e-05, 6.1124381318222731e-05, 7.4911811680067331e-05, 6.0481161199277267e-05, 5.2664847316918895e-05, 5.1494997023837641e-05, 9.5188392151612788e-05, 7.7431686804629862e-05, 5.9219910326646641e-05, 9.3233655206859112e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ 7,22,94,67,92,16,-46,-11,28,-58,-77,34,66,30,2,68,-7,19,-24,2,-25,-7,67,99,-83,32,127,-25,96,4,-4,-14,85,2,-8,65,-23,-41,-38,65,65,-39,-23,96,32,-38,43,36, 
  /* [1][0][][] */ -58,10,-67,-1,-48,87,53,11,93,-99,-94,110,62,-22,35,51,102,-41,46,127,-43,0,42,33,46,-6,-102,116,12,11,113,-58,49,113,-17,36,57,82,7,-71,-61,3,-18,-103,-29,40,-28,-61, 
  /* [2][0][][] */ 38,79,-55,100,20,-62,79,84,-101,73,-34,111,97,-18,74,-21,-63,-27,25,49,-94,-10,107,38,-31,127,102,5,-52,66,70,88,-59,-10,-80,-102,-75,99,115,28,-65,-34,10,4,-84,104,-31,-69, 
  /* [3][0][][] */ 83,-32,45,-24,-86,63,-84,47,65,35,81,13,95,100,76,-44,114,102,-35,25,120,-74,-55,-110,-2,-127,-73,116,50,-71,91,16,-52,-21,-3,1,-77,-11,49,-3,-36,-99,-75,-3,85,41,-19,-64, 
  /* [4][0][][] */ 67,71,10,50,-46,-11,51,25,82,108,19,61,36,-27,0,-109,-15,5,-52,24,127,-91,91,17,0,-27,31,-43,-42,53,-56,-45,64,127,20,-93,-47,11,-100,7,-57,-84,-66,-97,54,122,59,64, 
  /* [5][0][][] */ 94,-80,70,66,-15,-73,19,59,92,-80,0,-40,32,86,32,-65,69,64,-44,88,39,44,24,-25,-73,-71,22,-64,43,36,22,-74,-24,8,-36,28,-83,-44,32,-43,-127,-59,44,69,-12,34,42,-21, 
  /* [6][0][][] */ 11,-13,72,51,-31,-41,1,44,-9,-53,4,-53,59,37,75,-8,26,3,0,67,-46,-74,72,44,-35,-20,-3,-36,-7,-72,33,-46,-57,-73,-26,-67,-4,27,-60,127,80,48,16,-8,-72,69,-45,-28, 
  /* [7][0][][] */ 123,36,-28,-44,-89,121,-5,7,127,16,-75,19,58,-75,54,31,57,24,10,117,64,38,-2,78,-52,67,10,67,-70,114,-8,43,18,30,67,107,-98,95,5,-62,81,-94,91,61,63,6,115,-103, 
  /* [8][0][][] */ 27,-4,-23,-72,8,38,-46,-2,22,42,46,82,14,-20,-56,-127,-30,86,-33,27,39,-17,66,75,-73,28,53,72,-44,32,-57,92,71,-13,50,13,90,-1,-9,7,24,49,-70,-99,9,-5,1,95, 
  /* [9][0][][] */ 10,-6,121,54,85,-91,16,-105,60,41,46,56,-6,-58,-34,44,-35,6,-60,-59,21,127,-63,-41,107,5,-55,39,3,-41,-38,127,78,4,21,11,-31,79,12,17,105,-38,79,-41,93,14,-71,45, 
  /* [10][0][][] */ -39,34,78,-54,-30,89,93,27,42,33,34,-48,80,70,-18,-25,-21,68,-66,-41,-5,25,45,-57,36,16,-127,-76,-34,70,-63,-55,57,81,93,65,-29,15,-13,-2,-35,67,-78,-41,-62,-37,10,-42, 
  /* [11][0][][] */ 93,18,-26,87,127,29,38,17,94,76,-85,94,-20,-91,15,4,-68,-110,48,25,16,61,14,-113,-112,-98,-30,52,60,-21,16,-29,-90,-82,36,32,-72,62,-35,-23,-24,102,-82,-2,-52,-69,-98,-95, 
  /* [12][0][][] */ 18,93,-6,54,101,9,8,49,-48,61,14,49,0,40,69,8,-68,5,-17,-30,35,46,60,98,-31,16,97,-42,105,20,9,117,-15,-14,0,33,49,-6,20,77,127,55,-43,19,3,-33,-18,117, 
  /* [13][0][][] */ 124,-61,100,91,64,127,60,72,68,-119,-13,-31,108,67,53,-114,-91,-67,-80,30,67,-44,117,-60,-80,30,64,16,-95,-94,66,17,48,102,-4,38,-98,-66,-4,14,-119,60,-60,4,-48,35,-2,-19, 
  /* [14][0][][] */ -36,-120,81,52,29,-7,-21,-97,-56,-56,73,57,-19,-82,-82,-127,-29,-46,19,21,-32,19,-3,52,-111,-101,-28,36,-123,-88,-92,20,90,-20,-24,15,71,104,34,-119,-32,-102,35,71,73,-89,73,-68, 
  /* [15][0][][] */ 19,-57,-18,69,78,-78,74,-90,67,8,-47,11,99,9,-73,-120,73,12,-78,27,53,23,70,103,87,45,-16,96,23,61,73,-84,-4,11,-66,3,-60,127,122,-80,21,93,-39,-33,33,-71,-34,-79, 
  /* [16][0][][] */ -55,5,98,-66,17,121,-63,49,51,49,-112,77,3,-44,-58,-108,127,87,73,70,114,71,-37,42,-32,50,-16,67,-96,21,39,2,-95,77,74,63,-36,25,-68,-111,-21,-60,75,82,67,110,110,2, 
  /* [17][0][][] */ 27,-40,27,81,4,-105,-60,-93,33,-78,75,45,81,55,-105,127,22,44,88,102,-88,-12,14,-41,15,94,-72,21,91,-53,-30,68,-33,-8,23,1,-43,92,-90,30,-63,-10,-18,-11,0,5,61,-100, 
  /* [18][0][][] */ -74,102,125,-54,15,-97,-88,35,9,85,-104,-23,-33,52,88,-90,23,-6,74,6,118,-11,61,-24,39,-100,-21,106,37,46,23,79,39,-24,-88,-91,-11,34,-19,127,-21,8,-26,23,-104,23,26,5, 
  /* [19][0][][] */ 17,80,73,63,91,-76,87,93,78,-58,21,11,-48,33,-42,127,61,-83,99,58,-9,91,-32,36,67,-6,38,-64,-36,-105,-41,60,84,-43,54,4,24,-52,32,7,90,-67,-66,24,-81,31,69,-55, 
  /* [20][0][][] */ -13,55,73,96,-72,89,29,51,18,17,-72,0,-25,88,43,-30,-57,-40,-63,-28,22,-47,-79,-69,78,-84,-127,51,19,13,-38,113,92,52,-28,52,40,-7,-17,-103,-56,-27,-88,-99,-25,-65,-69,91, 
  /* [21][0][][] */ 104,31,75,-118,64,-54,84,24,20,-45,-43,38,12,45,-41,-127,-76,-18,40,-5,117,-52,60,-86,71,-123,-55,86,14,21,0,-17,-5,22,-81,-91,96,99,-98,-65,-26,-19,36,-33,-70,-66,-41,91, 
  /* [22][0][][] */ 37,-34,-44,-64,39,-22,63,57,-59,61,-57,-61,87,-69,-81,-127,47,71,-67,-28,71,-51,30,16,65,-12,-40,72,-34,-41,-41,-74,29,49,29,17,3,-39,-52,-109,-50,-37,9,40,44,-65,70,0, 
  /* [23][0][][] */ 73,-63,12,56,73,-83,-10,-72,51,-71,64,81,30,-87,12,-63,106,-13,-88,105,91,-71,100,-35,-12,-5,123,27,69,52,59,-43,-28,47,39,37,94,-31,-121,-29,-127,-9,14,-104,-57,-63,108,42, 
  /* [24][0][][] */ -45,-60,-67,-55,-80,-68,-38,-59,63,97,78,40,92,54,-21,-127,-44,41,31,-29,82,-56,-39,-36,52,-41,50,58,85,53,12,-40,-6,15,44,32,-35,-53,54,-57,-64,-93,83,-6,30,-16,50,60, 
  /* [25][0][][] */ -69,-7,-56,63,123,-58,-101,75,38,-94,-50,47,76,21,-83,61,-51,75,33,-77,69,113,31,-12,1,-26,-47,38,88,-78,49,127,105,-75,63,79,123,-53,-17,27,-57,121,-69,36,87,60,55,59, 
  /* [26][0][][] */ 50,-123,-28,-19,-116,-9,-13,-20,-112,-127,103,81,-87,-55,5,-33,115,25,-87,-73,10,67,96,10,52,63,7,45,4,3,-102,-8,-38,-68,-108,-111,-74,83,-59,83,-110,100,52,25,-80,70,-45,99, 
  /* [27][0][][] */ 3,4,-74,-115,-127,-83,-82,-26,36,96,30,-121,-34,51,79,-21,59,-26,57,-95,-108,4,-37,-26,-120,46,-120,-13,58,21,-43,-18,58,62,-104,-99,-102,-75,-127,124,-103,18,21,16,94,17,61,100, 
  /* [28][0][][] */ 43,47,62,62,4,-53,-38,-18,-24,-42,43,65,-32,-22,48,127,31,71,-36,52,-12,74,-14,5,-63,96,-53,-39,-11,-49,45,49,-32,13,56,51,54,-29,15,98,126,98,-25,90,-70,-5,15,37, 
  /* [29][0][][] */ 37,83,42,-34,-8,9,-78,7,69,-10,-59,-56,83,-72,-30,17,-72,74,21,-42,-47,-18,42,12,-10,60,-23,-16,-57,-3,78,6,43,10,-48,-37,-1,78,2,127,77,88,-30,63,1,75,-40,-13, 
  /* [30][0][][] */ 42,-103,-42,29,-107,38,-37,0,126,1,27,-28,-70,30,69,-38,10,47,101,-80,56,-85,-100,16,-84,3,-98,127,4,-82,-69,18,-78,-53,-95,-31,20,10,25,-10,80,-75,4,91,117,-26,118,66, 
  /* [31][0][][] */ 47,-10,28,70,74,35,-19,-59,-11,9,-29,-39,58,-56,-17,127,-51,-51,25,34,39,32,-9,71,42,-16,15,35,-35,-41,56,77,12,23,-53,-2,70,-4,-34,-10,72,-20,-14,26,6,-33,-14,18, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0037612542510032654, 0.0022141463123261929, 0.002490360289812088, 0.0025851421523839235, 0.0022072067949920893, 0.0029800361953675747, 0.0035961705725640059, 0.0024040634743869305, 0.0030828251037746668, 0.0028018075972795486, 0.0030364526901394129, 0.0024320981465280056, 0.0033469395712018013, 0.0022211491595953703, 0.0026837063487619162, 0.0024477958213537931, 0.0023572049103677273, 0.0026025711558759212, 0.0023885476402938366, 0.0025898790918290615, 0.0023614033125340939, 0.0024666348472237587, 0.003446540329605341, 0.0025977862533181906, 0.0031837520655244589, 0.0025704493746161461, 0.0022382559254765511, 0.0021885372698307037, 0.0040455064736306667, 0.0032908464781939983, 0.0025168461725115776, 0.0039624301716685295, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1301, -1300, 3792, 2036, 3906, 63, 1331, 3256, -1949, -1238, -892, 7669, 3837, 3542, 6310, -1014, -2177, 6709, 3832, 3444, 2492, 12966, 15169, 938, -1433, 1713, -27, -832, 1765, 1901, 4200, 11467, -839, 482, 6783, 3862, 5475, 1743, 1055, -699, 4687, -1800, 9456, -251, 334, 2796, -1296, 3270, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00028991498402319849, 0.00023533988860435784, 0.00019749175407923758, 0.00027687684632837772, 0.00013873784337192774, 0.00027375406352803111, 0.00022029926185496151, 0.0002307547110831365, 0.00021739157091360539, 0.00026414572494104505, 0.00032527802977710962, 0.00010510200081625953, 0.00017310460680164397, 0.00016983499517664313, 0.00013616109208669513, 0.00030325973057188094, 0.00026071688625961542, 0.00014959205873310566, 0.00015488544886466116, 0.00023274347768165171, 0.00032483632094226778, 8.2100217696279287e-05, 6.563471833942458e-05, 0.00032068550353869796, 0.00027203408535569906, 0.00025062248460017145, 0.00043052580440416932, 0.00023904768750071526, 0.00025473698042333126, 0.00022303711739368737, 0.00015291709860321134, 7.8570163168478757e-05, 0.00025879827444441617, 0.00022153620375320315, 0.00013623178529087454, 0.0001592354237800464, 0.00015870967763476074, 0.0003335846122354269, 0.00037188906571827829, 0.00035292655229568481, 0.00016440563194919378, 0.00025001633912324905, 9.0222580183763057e-05, 0.00035498681245371699, 0.00025951792486011982, 0.00018796359654515982, 0.00030723653617314994, 0.0002371566224610433, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -7,17,127,-12,5,39,-14,-91, 
  /* [1][0][][] */ 87,-65,62,-67,-12,-63,127,19, 
  /* [2][0][][] */ 59,67,89,-74,-65,24,127,-31, 
  /* [3][0][][] */ -1,20,2,-24,15,-58,127,8, 
  /* [4][0][][] */ 127,-53,-56,-57,-109,-45,-22,98, 
  /* [5][0][][] */ 30,70,127,0,25,-40,25,-44, 
  /* [6][0][][] */ 113,108,-25,127,-92,22,29,106, 
  /* [7][0][][] */ -33,-4,8,38,45,-124,-127,-40, 
  /* [8][0][][] */ 122,67,-34,89,-53,41,-127,-62, 
  /* [9][0][][] */ 127,-18,-35,46,-8,-30,18,-67, 
  /* [10][0][][] */ 73,26,-5,17,-24,127,28,4, 
  /* [11][0][][] */ 127,-17,2,-109,104,-49,-63,65, 
  /* [12][0][][] */ -55,127,99,-32,27,77,-101,127, 
  /* [13][0][][] */ 127,3,-82,18,31,-71,20,-94, 
  /* [14][0][][] */ 101,27,-8,-23,-127,24,-68,-8, 
  /* [15][0][][] */ 54,52,-25,17,-64,-5,127,27, 
  /* [16][0][][] */ 0,-44,111,2,127,-53,-58,-38, 
  /* [17][0][][] */ 24,-12,90,-6,127,-57,-63,-7, 
  /* [18][0][][] */ 107,-48,127,42,-39,35,-38,5, 
  /* [19][0][][] */ 79,56,76,-62,-31,-127,7,-60, 
  /* [20][0][][] */ 48,-27,64,127,21,-54,-85,69, 
  /* [21][0][][] */ 73,-20,-81,-127,39,-65,14,104, 
  /* [22][0][][] */ -49,-127,-28,-58,74,-32,106,-84, 
  /* [23][0][][] */ -13,29,37,-39,-104,-127,12,-33, 
  /* [24][0][][] */ 127,7,53,48,-16,-26,-85,73, 
  /* [25][0][][] */ 82,74,6,-78,-28,-7,-31,127, 
  /* [26][0][][] */ -71,-12,47,-112,127,-7,-30,-95, 
  /* [27][0][][] */ 112,127,0,-45,17,69,15,-1, 
  /* [28][0][][] */ 22,127,-18,7,-7,-66,-5,126, 
  /* [29][0][][] */ 127,22,101,124,43,-27,-121,53, 
  /* [30][0][][] */ 116,-127,-91,97,47,-1,-77,103, 
  /* [31][0][][] */ 98,-94,17,50,-98,-119,-127,68, 
  /* [32][0][][] */ -94,-78,28,-127,75,-12,-31,-86, 
  /* [33][0][][] */ 34,17,50,46,49,-68,127,36, 
  /* [34][0][][] */ -49,85,120,-70,127,-71,-85,88, 
  /* [35][0][][] */ -67,26,33,127,11,126,29,-34, 
  /* [36][0][][] */ 82,27,-38,-127,39,-14,27,45, 
  /* [37][0][][] */ 52,47,-9,19,-65,127,51,36, 
  /* [38][0][][] */ -25,-59,27,108,10,59,-1,127, 
  /* [39][0][][] */ 21,11,-127,43,5,-24,-25,76, 
  /* [40][0][][] */ 95,50,-82,29,-38,96,-92,127, 
  /* [41][0][][] */ 29,4,23,-42,-100,-127,-20,-6, 
  /* [42][0][][] */ -88,63,-91,108,-14,94,-33,-127, 
  /* [43][0][][] */ -14,2,-24,-127,-20,9,-14,-77, 
  /* [44][0][][] */ 77,32,26,78,30,127,-56,33, 
  /* [45][0][][] */ 0,74,-26,15,127,-35,-77,-10, 
  /* [46][0][][] */ 54,-61,18,127,91,19,-69,68, 
  /* [47][0][][] */ -16,-77,52,-12,127,20,40,21, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0036066696047782898, 0.0029277314897626638, 0.0024568841326981783, 0.0034444693010300398, 0.0017259597079828382, 0.003405620576813817, 0.0027406194712966681, 0.002870689844712615, 0.0027044464368373156, 0.0032860888168215752, 0.0040466012433171272, 0.0013075149618089199, 0.002153497189283371, 0.0021128219086676836, 0.0016939037013798952, 0.0037726841401308775, 0.003243432380259037, 0.0018609908875077963, 0.0019268429605290294, 0.0028954308945685625, 0.0040411064401268959, 0.0010213627247139812, 0.00081652466906234622, 0.0039894683286547661, 0.0033842232078313828, 0.0031178535427898169, 0.0053559299558401108, 0.0029738580342382193, 0.0031690397299826145, 0.0027746795676648617, 0.0019023556960746646, 0.0009774472564458847, 0.0032195642124861479, 0.002756007481366396, 0.0016947831027209759, 0.0019809585064649582, 0.0019744180608540773, 0.0041499389335513115, 0.0046264631673693657, 0.0043905610218644142, 0.0020452782046049833, 0.003110312856733799, 0.0011224084300920367, 0.0044161914847791195, 0.0032285167835652828, 0.002338349586352706, 0.00382215715944767, 0.002950332360342145, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -9605, -3650, 810, -10065, 3027, -1964, 9858, 10774, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00019875394355040044, 0.00017751855193637311, 0.00014271323743741959, 0.00012072410754626617, 0.0001525471598142758, 0.00013962083903606981, 0.00011752354475902393, 0.00014955537335481495, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-21,24,-26,22,51,-4,44,114,-85,50,24,-48,61,18,-43,3,-16,-31,-15,16,-60,2,-28,-55,-40,-51,-45,-35,95,-29,26,35,-45,10,-29,62,-63,-46,14,23,-29,-79,-12,48,-37,63,-37, 
  /* [1][0][][] */ 44,2,-3,67,51,63,13,32,75,-88,-11,9,37,18,-46,-11,-43,-47,-74,-1,12,-53,57,74,-4,-64,-7,36,-33,65,-53,127,-17,40,-31,-23,-55,-19,1,-18,-57,-25,-42,35,17,-8,16,-90, 
  /* [2][0][][] */ -18,-34,-69,34,-64,-17,-5,46,-97,-64,-74,-32,-33,37,-127,0,56,-63,37,-20,116,57,-12,-7,39,99,21,-99,-54,4,70,9,-18,26,59,-58,62,-2,62,95,-23,81,19,-16,-66,52,-31,79, 
  /* [3][0][][] */ 4,-27,-8,35,-27,7,-4,52,72,94,-127,-21,18,-22,-27,74,-67,-8,0,43,-19,-6,65,13,3,15,-49,37,-30,30,-26,-20,18,19,31,12,51,-1,39,9,-48,73,57,10,25,-15,-30,-35, 
  /* [4][0][][] */ -25,-76,22,-41,2,97,-48,-57,5,-38,57,25,-61,-35,-29,33,53,16,-13,23,-63,-37,113,-25,-84,-2,1,-7,15,-34,8,74,-43,27,-26,38,-37,38,-15,23,-42,39,-42,27,127,50,-18,15, 
  /* [5][0][][] */ -76,-72,64,-127,-28,28,-51,-62,8,78,-60,78,-83,19,43,17,72,52,67,23,44,5,-14,-73,42,-93,-5,-45,-23,-22,42,-102,-1,-44,43,2,-7,26,56,85,96,5,14,-37,-27,-17,-19,28, 
  /* [6][0][][] */ -65,-53,41,29,-61,-71,4,-78,-100,11,-117,37,21,-41,61,17,-24,10,12,127,-30,15,77,61,-84,-30,59,39,24,-37,-48,-74,-39,67,65,-87,-36,69,61,-34,-71,70,98,-46,-9,-41,-29,-4, 
  /* [7][0][][] */ 16,1,15,-11,8,28,-43,-35,-127,-33,98,28,7,-27,35,2,11,37,6,-17,-48,16,-23,-43,33,-5,-42,16,-5,-19,-29,-48,-100,-55,-41,3,62,-25,-26,3,54,2,47,-24,12,-41,46,10, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.009141058661043644, 0.008164403960108757, 0.0065636434592306614, 0.0055523230694234371, 0.0070159239694476128, 0.0064214183948934078, 0.005405123345553875, 0.0068783261813223362, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -1621, -132, 9009, 1602, -1337, -4939, 2571, 9502, 6185, -2755, -4878, -12172, -1378, 11900, 9569, 248, 4933, -8065, 5735, -1206, 13123, -1746, 287, -1468, 2511, -5346, -233, -2054, 4892, -15644, -3013, -633, -3703, -840, -1625, -1511, 6484, -5428, 512, -11701, 481, 4631, -4891, 624, 2654, 470, 8417, -2376, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00031300692353397608, 0.00018236420874018222, 0.00012220672215335071, 0.00012839901319239289, 0.00025079958140850067, 0.00018452678341418505, 0.00017041321552824229, 0.0001715834514470771, 0.00018235703464597464, 0.00047923260717652738, 0.00041464404785074294, 5.5040709412423894e-05, 0.0003110117104370147, 9.8113945568911731e-05, 0.00015480346337426454, 0.00019731684005819261, 0.00016576348571106791, 0.00011165998148499057, 0.00016663469432387501, 0.00030258230981417, 0.00010276349348714575, 0.00024085759650915861, 0.00026183927548117936, 0.0002537668333388865, 0.0001715467224130407, 0.00023613014491274953, 0.00024129857774823904, 0.00042797907372005284, 0.00014250093954615295, 0.00014514972281176597, 0.00018748124421108514, 0.0002107571781380102, 6.7446810135152191e-05, 0.00041647563921287656, 0.00011614226968958974, 0.00016236964438576251, 0.00018804697901941836, 8.6073603597469628e-05, 7.9920486314222217e-05, 8.2672544522210956e-05, 0.00026990409241989255, 0.00013119874347466975, 0.00023636489640921354, 0.00018174562137573957, 0.00011807324335677549, 0.00011584224557736889, 0.00016629583842586726, 0.0002022307162405923, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 74,61,-1,53,9,-16,-76,9,29,-74,41,47,24,-97,-42,30,102,52,-82,-3,88,0,-29,-21,72,93,26,-7,-67,40,-16,-52,127,6,102,43,-43,30,95,51,-79,65,-69,-64,32,-126,-45,-1, 100,127,-49,94,28,51,-106,-127,47,43,127,127,-9,-19,-32,-18,-54,127,-100,42,76,127,50,-25,22,127,23,127,-127,96,-40,-127,-18,-36,1,69,-64,127,127,56,-127,-78,55,-11,5,-14,-127,127, 47,36,27,38,14,3,-68,32,40,-80,37,70,13,-49,-42,-25,83,-3,-45,-21,96,20,-34,45,53,97,12,-3,-14,28,-24,-29,119,7,79,24,-30,46,77,30,-57,62,25,43,42,35,-7,15, 
  /* [0][1][][] */ -22,-47,-111,95,21,41,70,-33,30,39,-37,118,127,-9,-28,-72,-27,92,69,-25,-117,-9,23,-111,34,78,20,9,2,62,28,56,80,127,68,58,-64,4,-42,86,59,16,81,-127,12,-109,-12,117, 50,-82,-41,-127,105,13,127,-76,-127,127,6,62,-111,127,127,-19,-127,101,7,127,28,-11,127,-9,-127,122,37,-71,-53,-27,-127,107,107,-89,59,125,127,84,-16,127,95,-62,-18,-3,125,-71,-4,41, -17,-40,-103,61,-13,127,41,-17,35,36,-31,106,-23,12,-45,-17,-71,100,127,-60,-127,10,-73,127,11,43,20,27,74,57,46,43,21,-2,-12,-127,-29,-2,-5,34,26,85,-21,115,-7,127,-32,92, 
  /* [0][2][][] */ -38,-36,-48,20,-8,25,-19,7,32,-33,7,53,37,-74,-27,31,85,14,3,12,-65,-8,-18,4,31,-41,-5,4,9,6,42,6,21,9,127,11,-8,64,58,13,27,79,127,-41,-55,-94,-9,-43, -127,6,-127,33,-127,5,-93,-15,20,109,-74,84,-18,-44,-18,127,-86,58,-111,-33,-85,3,-13,-23,-11,93,-127,-27,-39,127,76,23,38,-30,11,10,-11,45,-38,64,-38,-127,-97,-41,-127,65,-105,87, -35,-29,-18,13,12,7,-25,5,18,-63,-6,18,-18,-63,-12,6,86,-19,91,20,-61,-32,-9,35,23,-11,-8,-10,38,14,43,9,54,2,60,36,-5,73,73,-13,31,99,-52,41,-36,123,0,-55, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.013302793726325035, 0.0077504785731434822, 0.0051937857642769814, 0.0054569579660892487, 0.010658982209861279, 0.0078423880040645599, 0.0072425613179802895, 0.0072922967374324799, 0.0077501740306615829, 0.020367385819554329, 0.017622372135519981, 0.0023392301518470049, 0.01321799773722887, 0.0041698426939547062, 0.0065791471861302853, 0.0083859656006097794, 0.0070449477061629295, 0.0047455490566790104, 0.0070819742977619171, 0.012859747745096684, 0.0043674483895301819, 0.010236447677016258, 0.011128169484436512, 0.010785090737044811, 0.0072907358407974243, 0.010035530664026737, 0.01025518961250782, 0.018189109861850739, 0.006056289654225111, 0.0061688628047704697, 0.0079679526388645172, 0.0089571801945567131, 0.0028664893470704556, 0.017700213938951492, 0.0049360464327037334, 0.0069007095880806446, 0.007991996593773365, 0.0036581282038241625, 0.0033966207411140203, 0.0035135832149535418, 0.011470923200249672, 0.005575946532189846, 0.010045507922768593, 0.0077241887338459492, 0.0050181127153337002, 0.0049232952296733856, 0.0070675727911293507, 0.0085948053747415543, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 45011, 5562, 1279, 1010, 3723, 1769, 6791, 3084, 2435, -5946, 12612, 1123, 5975, 1725, 2662, 1791, 6084, -279, 8359, 334, 4387, -791, 3201, 5850, 2411, -2774, 1492, 5872, 680, 5824, 1135, 7748, 727, 5503, -937, -1331, 2558, 2482, -118, 1119, 10670, -655, 10163, 3432, 597, 3796, 4168, -2655, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 2.5108383852057159e-05, 0.00014176264812704176, 0.00017934195057023317, 0.00023008481366559863, 0.00019677677482832223, 0.00024367112200707197, 0.00012558109301608056, 0.00021808092424180359, 0.00020582036813721061, 0.00012096556019969285, 7.6859476394020021e-05, 0.00022630485182162374, 0.00013381837925408036, 0.0002080390986520797, 0.00023450283333659172, 0.00019417986914049834, 0.00013568825670517981, 0.00030232334393076599, 0.00011230070231249556, 0.00017759855836629868, 0.00016239052638411522, 0.00018343336705584079, 0.00018300293595530093, 0.00013188374578021467, 0.00018525161431171, 0.00024515468976460397, 0.00028406013734638691, 0.0001431579003110528, 0.00021061116422060877, 0.00011222590546822175, 0.00026345791411586106, 0.00011896334763150662, 0.00019893128774128854, 0.000154758759890683, 0.00016026479715947062, 0.00031986300018616021, 0.00022592580353375524, 0.00013853776908945292, 0.00024980900343507528, 0.00021286231640260667, 9.0564382844604552e-05, 0.00018069683574140072, 8.2540609582792968e-05, 0.00014588100020773709, 0.00024471560027450323, 0.00020327448146417737, 0.0001408300013281405, 0.00015388132305815816, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,29,-24,-20,42,22,4,-37, 
  /* [1][0][][] */ -19,-48,-41,-13,-49,-127,0,10, 
  /* [2][0][][] */ -61,56,-8,-62,-71,19,-66,127, 
  /* [3][0][][] */ 51,42,56,-19,-49,-127,44,-21, 
  /* [4][0][][] */ 28,73,-112,52,-113,127,69,65, 
  /* [5][0][][] */ -36,53,28,-28,-71,-127,-57,-15, 
  /* [6][0][][] */ -61,124,127,-27,-81,-23,8,-33, 
  /* [7][0][][] */ -15,-6,39,66,-3,-127,-9,62, 
  /* [8][0][][] */ 127,19,-59,68,-86,-65,-83,-4, 
  /* [9][0][][] */ 106,-39,-71,-86,7,-24,-59,127, 
  /* [10][0][][] */ -110,11,9,127,0,83,33,-89, 
  /* [11][0][][] */ 19,24,57,-5,7,120,127,79, 
  /* [12][0][][] */ -79,-91,-67,-77,127,-32,14,46, 
  /* [13][0][][] */ -41,-5,-19,46,26,-127,33,80, 
  /* [14][0][][] */ 46,55,127,13,73,-118,-116,-31, 
  /* [15][0][][] */ -57,65,127,59,-8,34,39,-60, 
  /* [16][0][][] */ -102,-50,69,-51,127,4,-61,-3, 
  /* [17][0][][] */ 40,-48,-50,7,-15,127,-23,33, 
  /* [18][0][][] */ -17,127,82,-66,-61,56,93,-75, 
  /* [19][0][][] */ 11,101,72,127,-25,29,35,17, 
  /* [20][0][][] */ 40,41,100,-127,-76,9,92,-37, 
  /* [21][0][][] */ -75,77,27,-85,127,50,120,-19, 
  /* [22][0][][] */ 81,-35,-103,74,65,-43,-72,127, 
  /* [23][0][][] */ 44,-83,-127,-38,60,-15,-48,98, 
  /* [24][0][][] */ 35,-11,-81,21,-60,45,-127,119, 
  /* [25][0][][] */ -8,-33,59,6,127,-15,-75,-45, 
  /* [26][0][][] */ 2,81,127,-32,-29,-13,33,-69, 
  /* [27][0][][] */ -46,26,127,-65,23,18,91,-121, 
  /* [28][0][][] */ 65,-24,87,127,48,-43,44,98, 
  /* [29][0][][] */ 64,92,127,31,-32,77,-123,106, 
  /* [30][0][][] */ 32,-12,-84,61,-127,-27,-37,64, 
  /* [31][0][][] */ 6,127,69,-34,-54,28,101,-121, 
  /* [32][0][][] */ 63,-23,-12,24,112,127,29,-29, 
  /* [33][0][][] */ 33,-29,-127,10,20,-32,-16,65, 
  /* [34][0][][] */ 19,-44,10,-127,-2,55,-21,9, 
  /* [35][0][][] */ -33,13,76,-16,3,-127,3,-11, 
  /* [36][0][][] */ -16,10,-36,-127,-12,8,9,-36, 
  /* [37][0][][] */ 60,-21,-27,-96,-89,127,-69,-78, 
  /* [38][0][][] */ 84,-66,-22,105,80,34,-49,127, 
  /* [39][0][][] */ 127,91,41,77,6,100,-65,-5, 
  /* [40][0][][] */ 33,-104,-127,-14,6,-7,-56,81, 
  /* [41][0][][] */ -25,-70,-127,-101,-14,-92,-35,-27, 
  /* [42][0][][] */ 78,127,127,126,-100,-25,46,49, 
  /* [43][0][][] */ 107,-12,-127,-100,-72,-57,22,40, 
  /* [44][0][][] */ -15,85,127,-100,-84,6,72,-95, 
  /* [45][0][][] */ 22,31,-127,62,-49,14,-1,43, 
  /* [46][0][][] */ 40,-58,-68,-127,26,-36,-52,50, 
  /* [47][0][][] */ 83,-127,117,-70,83,-21,0,12, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00039237900637090206, 0.0022153831087052822, 0.002802650211378932, 0.0035956297069787979, 0.0030751111917197704, 0.0038079484365880489, 0.0019625071436166763, 0.0034080399200320244, 0.0032164391595870256, 0.0018903784221038222, 0.0012011145008727908, 0.003536558710038662, 0.0020912345498800278, 0.0032511122990399599, 0.0036646719090640545, 0.0030345283448696136, 0.0021204559598118067, 0.0047245309688150883, 0.0017549691256135702, 0.0027754055336117744, 0.0025377431884407997, 0.0028665883000940084, 0.0028598618227988482, 0.0020610012579709291, 0.0028950029518455267, 0.0038311330135911703, 0.004439124371856451, 0.0022371872328221798, 0.0032913070172071457, 0.001753800199367106, 0.0041171647608280182, 0.0018590890103951097, 0.0031087808310985565, 0.0024184784851968288, 0.0025045236106961966, 0.004998630378395319, 0.0035306350328028202, 0.0021649864502251148, 0.00390386744402349, 0.0033264865633100271, 0.0014152866788208485, 0.0028238235972821712, 0.0012898959685117006, 0.0022797421552240849, 0.0038242707960307598, 0.0031766535248607397, 0.0022008081432431936, 0.0024047663901001215, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -11339, -33888, 239, 5424, -16148, -1035, -24215, -537, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00014256182475946844, 8.2655475125648081e-05, 5.8547731896396726e-05, 6.1452548834495246e-05, 9.5762457931414247e-05, 8.8188331574201584e-05, 8.5133877291809767e-05, 9.3009293777868152e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 47,46,-75,52,17,26,-91,-35,6,-13,-3,-42,-17,0,40,3,53,-27,44,-19,25,-39,48,-3,8,-27,-22,13,-7,-1,-14,2,53,16,20,14,127,63,28,-25,7,-31,-16,-18,84,25,15,-50, 
  /* [1][0][][] */ 58,27,13,-9,36,93,-6,-24,35,69,-42,-66,114,-20,11,51,28,26,21,-81,127,-40,37,54,41,26,41,13,29,-60,75,89,64,94,19,119,66,28,9,31,79,1,30,41,25,40,107,-67, 
  /* [2][0][][] */ -34,9,71,127,-36,29,0,56,35,78,10,-77,-28,98,29,38,-70,-107,72,17,4,56,-48,-85,-28,-32,30,-9,-104,30,21,-10,-29,-41,-81,-45,23,39,-69,-13,-27,-62,-46,22,69,-88,-34,12, 
  /* [3][0][][] */ -24,46,-70,-6,19,-70,11,60,106,-69,-44,12,-5,-24,12,61,26,-1,-22,-18,2,10,-68,40,-27,-28,37,-16,71,-26,49,-48,43,-26,-30,-49,-127,7,-81,18,-39,-67,25,5,-51,7,-14,-36, 
  /* [4][0][][] */ 45,-26,25,-12,-46,84,38,67,-127,-57,51,37,84,-83,-67,-74,106,60,63,-19,28,-81,-8,48,-27,-5,-48,-120,-62,-48,109,9,92,-10,104,82,55,80,86,42,10,48,-62,-50,94,59,82,-79, 
  /* [5][0][][] */ 36,78,15,93,36,38,-60,-90,-101,31,-16,-2,26,67,38,-69,83,98,-10,30,-8,-64,-15,-61,-91,-71,-44,64,-2,38,-23,55,4,-82,60,6,-44,127,-40,-104,-9,-51,-16,-46,-13,-14,-42,97, 
  /* [6][0][][] */ 112,56,1,119,-95,15,1,74,22,-87,72,95,80,-28,-31,-42,53,41,-57,11,62,-19,-40,15,30,62,-46,-36,13,-48,52,56,9,-46,-2,96,93,-89,-7,10,-76,67,-74,54,42,127,109,-35, 
  /* [7][0][][] */ 29,3,127,40,-51,59,-79,3,-25,112,-1,-15,53,56,-1,-5,-54,-18,-75,3,-5,40,5,-34,-8,33,48,-25,15,2,13,-19,-84,-21,57,26,81,-8,40,-20,-10,-53,-33,-42,2,-24,-2,34, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0060851196758449078, 0.0035280724987387657, 0.0024990558158606291, 0.0026230451185256243, 0.0040875319391489029, 0.0037642372772097588, 0.003633860731497407, 0.0039700157940387726, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 15635, -17053, -938, 2946, -4014, 13546, 6074, 549, -10025, 2462, -4285, -1461, -5818, -9693, 10476, -1196, -6952, 30197, -2754, -14152, 14272, 876, 1409, -1696, -476, -1959, -4252, 666, -2355, 4767, 637, 21081, 13904, 1166, 1863, 8161, 1998, 19304, 542, 672, -3994, -4001, -406, 2357, 3050, 21468, 16488, -5490, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 8.230120874941349e-05, 8.3733160863630474e-05, 0.00098690448794513941, 0.00025889821699820459, 0.00019364022591616958, 0.00011959889525314793, 0.0001020070631057024, 0.00039229777758009732, 9.3454182206187397e-05, 0.00032147351885214448, 0.00014297201414592564, 0.0001451230637030676, 0.00016236701048910618, 0.00010834821296157315, 8.6181455117184669e-05, 9.7670621471479535e-05, 8.0876969150267541e-05, 5.8868932683253661e-05, 0.00026755325961858034, 5.5118089221650735e-05, 0.00010295522952219471, 0.00028463901253417134, 0.00013957753253635019, 0.00014422142703551799, 0.00021450204076245427, 0.00017803875380195677, 0.00020928040612488985, 0.00016794260591268539, 0.00022835383424535394, 0.00015913775132503361, 0.00018896619440056384, 8.7735788838472217e-05, 0.00011959208495682105, 0.0002360068610869348, 0.00017187351477332413, 0.00014747682143934071, 0.00045642224722541869, 0.00013687805039808154, 0.00012551347026601434, 0.00038890834548510611, 0.00013179260713513941, 0.00016200287791434675, 0.00016240194963756949, 0.00013200660760048777, 0.00018587202066555619, 8.049896132433787e-05, 9.4524133601225913e-05, 0.00016002940537873656, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -111,7,28,1,127,-59,34,-1,14,31,81,3,7,26,-58,-9,49,-20,-16,91,-74,-1,-55,-2,-13,5,31,-38,-20,127,29,-119,-54,102,102,-48,12,-52,-127,-32,21,-55,-23,-70,6,-11,-118,10, -61,70,-41,37,-6,-52,127,-26,102,18,78,127,48,127,-22,12,52,-43,9,124,-66,-18,112,-116,20,54,-88,23,-30,-101,71,-127,-127,-99,19,-24,-64,-32,-111,34,-48,-54,7,-127,30,-127,18,56, -55,-19,-8,-4,41,-37,21,-13,43,27,29,-22,-15,8,-43,12,35,-7,-3,70,-47,-7,-76,5,30,13,13,-122,-33,45,-59,-109,-2,-31,78,-38,17,-31,-91,4,37,-34,-3,-51,-5,-94,-127,-16, 
  /* [0][1][][] */ -127,127,-28,-67,22,-101,12,-14,26,9,72,16,54,100,-108,43,127,-127,10,93,-15,-68,-127,-29,-127,-13,-35,20,-2,-16,58,-66,-63,127,-94,-17,32,-78,41,62,-100,6,-82,72,-10,-111,-15,-57, -25,121,127,127,-17,89,-122,127,127,-127,-84,28,127,45,127,-74,-34,-114,127,-10,-127,127,107,0,95,127,61,127,127,-102,127,-13,-36,-105,-24,-127,127,127,91,59,-46,127,-19,92,127,48,-14,-105, -33,48,-53,-53,-37,-127,10,-31,-29,4,123,25,25,87,-84,115,100,-107,-10,100,53,-104,-122,-35,25,-11,-16,17,0,8,57,-45,4,-39,-127,-35,22,-94,44,-127,-62,13,127,81,-35,-100,-18,127, 
  /* [0][2][][] */ 0,10,-7,-14,42,-62,11,3,41,20,127,14,-20,-21,-76,100,69,-56,-51,-9,-15,6,-44,45,-14,-23,-20,-32,23,53,-39,43,-27,31,-32,76,-55,-70,52,-37,79,-8,-9,8,-25,16,-5,-43, -100,111,-9,14,-59,-96,62,-76,44,17,71,-65,-14,-33,-106,127,68,-25,-5,127,-49,17,79,127,2,-124,127,-11,28,-62,-10,-113,-9,-51,-40,-66,-81,-57,41,28,127,68,-54,56,-22,-87,-106,4, 50,-27,20,-8,-5,-45,1,9,39,21,120,5,13,-34,-66,53,41,-65,-56,-5,-10,-6,-55,33,4,-18,0,-77,17,-16,-32,43,-13,20,22,67,-43,-54,59,-3,52,2,24,10,-31,-38,15,37, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0042274510487914085, 0.0043010041117668152, 0.05069294199347496, 0.013298462145030499, 0.0099464468657970428, 0.0061432691290974617, 0.0052396543323993683, 0.02015061117708683, 0.0048003303818404675, 0.016512680798768997, 0.0073438435792922974, 0.0074543338268995285, 0.0083400793373584747, 0.0055653713643550873, 0.0044267624616622925, 0.0050169103778898716, 0.0041542942635715008, 0.0030238381586968899, 0.013743034563958645, 0.0028311738278716803, 0.0052883573807775974, 0.014620654284954071, 0.0071694841608405113, 0.0074080200865864754, 0.011018026620149612, 0.0091450680047273636, 0.010749814100563526, 0.0086264731362462044, 0.011729531921446323, 0.0081742061302065849, 0.0097063621506094933, 0.0045066014863550663, 0.0061429194174706936, 0.012122634798288345, 0.008828386664390564, 0.0075752357952296734, 0.02344440296292305, 0.0070308237336575985, 0.0064470749348402023, 0.019976511597633362, 0.0067696068435907364, 0.0083213755860924721, 0.0083418739959597588, 0.0067805987782776356, 0.0095474282279610634, 0.00413487758487463, 0.0048552891239523888, 0.0082200067117810249, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 490, 6005, -5859, 3783, 1640, 5881, 2789, 11281, 9316, 4774, -2185, 4, 996, 5102, 3163, -865, -194, 5334, 6960, 269, 3471, 10290, 3126, 6253, 15146, 6939, 1402, 7192, 2651, 6671, -2575, 9036, 1548, 9093, 4279, 3594, 92339, 9655, 4570, 12285, 1981, 860, 2965, 1479, 4124, 1340, 1911, 3769, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0002966145402751863, 0.00012371123011689633, 0.00013828618102706969, 0.00014934036880731583, 0.00027121879975311458, 0.00010947227565338835, 0.00017046926950570196, 8.0970596172846854e-05, 9.7447518783155829e-05, 0.00015332897601183504, 0.00015673578309360892, 0.00020406082330737263, 0.00016845372738316655, 0.00013224115537013859, 0.00016882539785001427, 0.00015390198677778244, 0.00018754000484477729, 0.00013750992366112769, 0.00013069390843156725, 0.00016142382810357958, 0.0001553272595629096, 8.2042381109204143e-05, 0.00017745798686519265, 0.00011195762635907158, 6.0047597798984498e-05, 0.00012772015179507434, 0.00018449418712407351, 0.00013304701133165509, 0.00010839971946552396, 0.00012212952424306422, 0.00021564659255091101, 8.0112426076084375e-05, 0.00024685560492798686, 9.4825183623470366e-05, 0.00014291986008174717, 0.00018720603839028627, 1.7084901628550142e-05, 9.1774963948410004e-05, 0.0001184449574793689, 8.3817787526641041e-05, 0.00017604106687940657, 0.00019966330728493631, 0.00022941207862459123, 0.00015324751439038664, 0.00015266497211996466, 0.00019520465866662562, 0.00020043400581926107, 0.00010436761658638716, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -86,-127,-32,17,-27,-4,37,-37, 
  /* [1][0][][] */ -26,127,30,-97,11,-111,-75,96, 
  /* [2][0][][] */ -127,-65,50,5,76,10,26,-25, 
  /* [3][0][][] */ 6,-37,-127,-52,38,-49,-32,56, 
  /* [4][0][][] */ -58,-122,127,-10,120,-83,74,18, 
  /* [5][0][][] */ -26,72,58,-98,124,55,-52,127, 
  /* [6][0][][] */ -127,92,47,62,-41,8,32,-125, 
  /* [7][0][][] */ 58,-2,44,36,45,-127,7,73, 
  /* [8][0][][] */ -3,74,-14,-33,20,106,127,-67, 
  /* [9][0][][] */ 105,127,22,-35,-85,-64,-35,96, 
  /* [10][0][][] */ 27,-7,40,-1,-31,43,-127,-72, 
  /* [11][0][][] */ -53,17,-96,-59,127,26,34,46, 
  /* [12][0][][] */ 101,30,-41,4,127,89,20,-3, 
  /* [13][0][][] */ -119,-127,-6,77,-117,48,86,-3, 
  /* [14][0][][] */ -14,98,-66,127,-43,126,-14,12, 
  /* [15][0][][] */ 0,-96,-68,-96,127,32,-29,73, 
  /* [16][0][][] */ 64,-92,10,49,37,-21,34,-127, 
  /* [17][0][][] */ -90,-101,-127,105,-3,107,70,-113, 
  /* [18][0][][] */ 56,-12,127,0,-37,-95,-74,-26, 
  /* [19][0][][] */ -29,127,16,20,115,-120,-82,-28, 
  /* [20][0][][] */ -76,-26,-127,-55,44,2,-8,-4, 
  /* [21][0][][] */ -113,-16,34,65,-81,-127,126,-68, 
  /* [22][0][][] */ 55,-11,-127,-75,-39,-13,-6,52, 
  /* [23][0][][] */ -27,25,127,-9,-109,35,12,-92, 
  /* [24][0][][] */ -71,83,71,108,127,71,14,-46, 
  /* [25][0][][] */ -61,-127,-78,23,-59,36,32,-9, 
  /* [26][0][][] */ 77,91,-127,-77,-105,-13,-87,40, 
  /* [27][0][][] */ 37,46,-64,9,-127,5,-36,-13, 
  /* [28][0][][] */ -30,70,44,-83,60,95,-127,-93, 
  /* [29][0][][] */ 41,-8,-9,-84,-127,15,10,-65, 
  /* [30][0][][] */ -77,-8,36,127,48,11,-26,-24, 
  /* [31][0][][] */ 4,-103,-3,-84,-127,53,-65,-110, 
  /* [32][0][][] */ -127,0,28,-18,15,-17,-8,18, 
  /* [33][0][][] */ 63,-90,-127,-89,0,4,-34,4, 
  /* [34][0][][] */ 24,63,127,-3,-118,-49,63,-66, 
  /* [35][0][][] */ 99,10,18,4,-118,-42,-127,-45, 
  /* [36][0][][] */ 127,9,83,-43,20,-13,66,84, 
  /* [37][0][][] */ 111,96,-16,-22,69,91,-127,48, 
  /* [38][0][][] */ 8,84,77,127,-22,30,60,-57, 
  /* [39][0][][] */ 26,53,127,-37,69,-46,-33,28, 
  /* [40][0][][] */ 50,16,30,0,-103,-127,17,-47, 
  /* [41][0][][] */ 41,-49,6,127,-38,57,26,74, 
  /* [42][0][][] */ -23,-94,36,-53,127,-38,76,25, 
  /* [43][0][][] */ -17,-44,-78,-27,104,65,-88,127, 
  /* [44][0][][] */ 98,-25,127,-2,14,38,-63,7, 
  /* [45][0][][] */ -39,38,32,-24,-94,-127,-29,69, 
  /* [46][0][][] */ -56,64,81,41,-13,-27,49,-127, 
  /* [47][0][][] */ 51,-22,44,127,-15,-92,96,49, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0060506607405841351, 0.0025235938373953104, 0.0028209094889461994, 0.0030464045703411102, 0.0055326111614704132, 0.0022331324871629477, 0.003477414371445775, 0.0016517248004674911, 0.00198783865198493, 0.0031277684029191732, 0.0031972641590982676, 0.0041626510210335255, 0.0034362992737442255, 0.0026975965593010187, 0.0034438811708241701, 0.0031394571997225285, 0.0038256417028605938, 0.0028050744440406561, 0.0026660342700779438, 0.0032928958535194397, 0.0031685316935181618, 0.0016735882963985205, 0.0036199777387082577, 0.0022838313598185778, 0.0012249151477590203, 0.002605372341349721, 0.0037635096814483404, 0.0027140353340655565, 0.0022112533915787935, 0.0024913286324590445, 0.0043989899568259716, 0.0016342189628630877, 0.0050356248393654823, 0.0019343455787748098, 0.0029154322110116482, 0.0038188290782272816, 0.00034851609962061048, 0.0018721238011494279, 0.0024161669425666332, 0.0017098048701882362, 0.0035910739097744226, 0.0040729455649852753, 0.0046797930262982845, 0.0031261066906154156, 0.0031142232473939657, 0.0039819935336709023, 0.0040886672213673592, 0.0021290022414177656, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3607, -1688, 13958, -7564, -12899, -13711, -6902, -1645, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.7827262177597731e-05, 0.00012942215835209936, 9.0427747636567801e-05, 0.00012653144949581474, 0.00013366203347686678, 0.00010130133159691468, 0.00016386387869715691, 0.0001942578237503767, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -16,-32,43,-52,58,89,62,94,103,-45,-13,50,-28,-23,21,-15,42,38,9,-43,-26,21,-82,-42,26,-5,19,-71,-35,22,37,24,20,46,56,23,123,-57,-80,3,-52,-62,-32,-4,-65,-92,-127,58, 
  /* [1][0][][] */ -22,-1,-39,55,-3,9,-42,-17,-62,29,22,97,-26,10,-25,127,40,56,19,-36,-43,-17,-71,21,19,-3,-15,-84,56,-11,-66,-75,62,-31,-32,-59,38,34,54,-46,3,77,51,-42,-4,-42,-53,-17, 
  /* [2][0][][] */ 1,-71,-24,-6,-35,11,4,12,113,17,-6,-16,-33,-76,32,13,-6,-67,-25,-2,-96,56,5,28,5,53,-31,-21,-23,-41,32,-51,-102,29,-56,56,-62,58,-12,-25,127,-13,-3,42,29,35,-53,-32, 
  /* [3][0][][] */ -34,-114,102,58,17,-110,-23,-11,-127,127,64,-59,47,5,-24,26,51,31,-21,49,80,88,31,-59,5,91,73,35,-36,-69,16,9,-30,6,45,15,-14,-89,-42,45,-26,-4,21,-69,-88,18,3,31, 
  /* [4][0][][] */ -15,51,-13,82,35,9,8,-5,-61,78,40,77,-2,19,59,18,12,-105,-16,-10,93,-10,-91,56,70,-26,33,29,52,26,-10,-48,-47,127,3,14,65,-30,20,26,-31,42,-2,-26,4,-59,-41,21, 
  /* [5][0][][] */ -32,-4,-10,-66,-114,34,111,28,7,61,-25,-23,-100,-9,63,-36,-74,41,-72,-84,-1,112,0,30,108,33,-10,16,-20,-22,127,-52,-12,99,79,95,-19,46,77,34,-27,-42,-25,36,-57,43,20,51, 
  /* [6][0][][] */ -3,-26,-5,22,-51,-48,9,2,20,-10,45,13,-51,-24,39,53,9,-52,11,-68,71,-24,-5,-26,5,-5,11,33,43,2,14,127,47,-15,-13,20,1,-14,14,11,1,33,-26,-52,-8,-27,-23,43, 
  /* [7][0][][] */ -32,-21,-44,-7,8,-22,8,14,37,6,18,6,-9,12,5,1,38,-2,-1,-9,-66,12,7,-28,3,-8,-58,-11,-16,-20,26,35,26,-3,31,13,-21,127,-13,-48,-41,-3,-41,-33,20,64,-81,-16, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0037326586898416281, 0.0055004414170980453, 0.0038431792054325342, 0.0053775864653289318, 0.0056806360371410847, 0.0043053063564002514, 0.0069642146117985249, 0.0082559576258063316, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -237, 34858, 25431, -152, 1471, -12231, 18786, 17627, -10995, -2895, -1286, 18211, 20009, -18182, -12610, -2232, 1094, 32511, -1310, -259, 42219, 12478, -10786, -6364, 16549, 15058, -1721, -1274, -5646, -194, 27550, -3599, -4503, 9566, 12089, 18607, -3185, 42993, -4733, -821, 24802, -397, -4770, 14865, 66, -823, -5691, 14969, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00021603987261187285, 7.9258184996433556e-05, 0.00010263152216793969, 0.00010600558016449213, 5.6749249779386446e-05, 0.00015877431724220514, 0.00010806298087118194, 9.6841104095801711e-05, 0.00039437375380657613, 6.178153125802055e-05, 9.8501797765493393e-05, 0.0001012805660138838, 9.155456064036116e-05, 0.0002029255119850859, 7.1039612521417439e-05, 6.6075583163183182e-05, 6.40684156678617e-05, 0.00015258108032867312, 0.000341796810971573, 7.6186086516827345e-05, 6.3372215663548559e-05, 8.7401822383981198e-05, 7.2678063588682562e-05, 0.00013568616122938693, 8.3755665400531143e-05, 9.291815513279289e-05, 0.00028019430465064943, 0.00011578405974432826, 9.8325348517391831e-05, 0.00016063293151091784, 0.00011465412535471842, 8.2821359683293849e-05, 5.8104029449168593e-05, 9.580425830790773e-05, 8.7850676209200174e-05, 8.1925747508648783e-05, 7.4073286668863147e-05, 7.7561504440382123e-05, 8.2317885244265199e-05, 9.8841679573524743e-05, 0.00014784585800953209, 0.00023484241683036089, 7.5551928603090346e-05, 8.2428996392991394e-05, 0.00022965745301917195, 0.00019471008272375911, 0.0002484541037119925, 0.00013044122897554189, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 74,-99,-35,75,98,38,-52,-94,15,84,116,-71,-24,65,92,75,79,-93,71,89,-105,-67,51,86,-73,-53,76,83,116,104,-50,80,63,-77,-111,-94,102,-63,87,11,-66,63,33,-95,104,114,45,-76, 86,-117,-51,96,127,45,-83,-110,25,83,127,-104,-58,93,101,99,79,-89,97,96,-98,-84,73,72,-91,-97,83,97,127,127,-60,111,80,-103,-127,-113,110,-84,86,38,-107,107,42,-82,127,127,52,-81, 47,-88,-32,52,58,-11,-41,-45,16,20,26,-56,-54,60,52,49,19,-18,61,30,-30,-87,41,29,-59,-30,28,39,63,108,-23,18,43,-102,-62,-83,39,-36,7,22,-39,16,33,-58,53,27,9,-49, 
  /* [0][1][][] */ 66,-107,-57,83,83,76,-104,-104,103,104,112,-88,-88,93,122,88,123,-107,71,122,-121,-108,100,127,-103,-68,121,85,84,65,-86,111,84,-104,-112,-125,114,-87,127,82,-89,94,86,-123,90,95,62,-100, 70,-127,-127,127,88,127,-127,-127,127,127,111,-127,-127,127,127,127,127,-127,86,127,-127,-106,127,111,-127,-127,127,127,123,103,-127,127,127,-108,-95,-127,127,-127,125,127,-127,127,127,-127,107,109,69,-127, 2,-96,-79,67,22,24,-73,-43,62,55,45,-52,-75,58,65,71,22,-44,43,34,-19,-69,74,52,-64,15,35,57,66,22,-49,25,42,-90,-63,-78,27,-49,10,58,-21,54,49,-61,35,-6,43,-78, 
  /* [0][2][][] */ -40,-55,-54,33,22,30,-38,-15,-75,57,21,-60,-71,56,57,43,68,-44,-80,62,-45,-117,55,67,-81,-80,64,46,16,25,-39,55,66,-66,-27,-36,59,-30,81,84,-30,-5,75,-73,51,17,-106,-28, -127,-68,-89,52,21,66,-56,-32,-56,89,41,-85,-118,65,49,67,70,-52,-127,72,-55,-127,68,46,-109,-67,38,53,53,81,-67,43,93,-127,16,-80,63,-44,61,92,-34,3,106,-77,48,-6,-127,-64, -61,-43,-64,9,2,22,2,1,-68,43,29,-14,-57,50,49,38,3,-32,-54,15,-6,-24,22,26,-32,3,17,39,32,97,-21,11,39,-26,12,-46,19,-26,-1,37,2,-36,41,-14,11,-25,-57,-23, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0091816941276192665, 0.0033684729132801294, 0.0043618394993245602, 0.0045052370987832546, 0.0024118430446833372, 0.0067479084245860577, 0.0045926766470074654, 0.0041157468222081661, 0.01676088385283947, 0.0026257149875164032, 0.0041863261722028255, 0.0043044239282608032, 0.0038910687435418367, 0.0086243338882923126, 0.0030191834084689617, 0.0028082123026251793, 0.0027229075785726309, 0.0064846957102417946, 0.014526364393532276, 0.003237908473238349, 0.0026933192275464535, 0.0037145775277167559, 0.0030888176988810301, 0.0057666618376970291, 0.003559615695849061, 0.0039490214549005032, 0.011908257380127907, 0.0049208225682377815, 0.0041788271628320217, 0.0068268994800746441, 0.0048728003166615963, 0.0035199078265577555, 0.0024694211315363646, 0.0040716808289289474, 0.0037336535751819611, 0.0034818442072719336, 0.0031481147743761539, 0.0032963638659566641, 0.0034985099919140339, 0.0042007714509963989, 0.0062834490090608597, 0.0099808024242520332, 0.0032109569292515516, 0.0035032322630286217, 0.0097604412585496902, 0.0082751782611012459, 0.010559299029409885, 0.0055437521077692509, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1595, 4511, 3774, -1325, -11, 10676, 3235, 1730, 8898, 1531, -2099, 2059, 4372, 1905, -254, 1282, -1518, 7882, -2838, -778, 1006, 1494, 593, -433, 434, 3207, -2302, -1302, -517, -2325, 7208, 4023, 880, 1143, 349, 1313, 1242, 6843, 1392, 559, 8155, -1651, 1182, 1806, -2063, -2019, 19245, 3018, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0003104089992120862, 0.00017999546253122389, 0.00018814664508681744, 0.00024621281772851944, 0.00057263922644779086, 8.7034219177439809e-05, 0.0002518411201890558, 0.00024509039940312505, 0.00011196539708180353, 0.00038278527790680528, 0.00019354029791429639, 0.00026787896058522165, 0.00016419203893747181, 0.00027429495821706951, 0.00041618576506152749, 0.00019005955255124718, 0.00025140255456790328, 0.0001255525421584025, 0.00016177474753931165, 0.00038448773557320237, 0.00036313568125478923, 0.00023045492707751691, 0.0002935376251116395, 0.00024863029830157757, 0.00029973225900903344, 0.0001839743199525401, 0.00022457135492004454, 0.00021277215273585171, 0.00031524224323220551, 0.00018296483904123306, 0.00013390152889769524, 0.00018872367218136787, 0.0003288203151896596, 0.00031176523771136999, 0.00026093446649610996, 0.00027426957967691123, 0.00024523574393242598, 0.00012625732051674277, 0.00033700626227073371, 0.00025594947510398924, 0.00012351652549114078, 0.0001341079332632944, 0.00025476649170741439, 0.00024294338072650135, 0.00028054675203748047, 0.00022639051894657314, 5.9372694522608072e-05, 0.00017386078252457082, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 40,22,-55,8,-38,50,-127,23, 
  /* [1][0][][] */ 6,-59,-114,-8,-6,-18,127,-103, 
  /* [2][0][][] */ -127,-43,-77,-51,-23,44,-126,10, 
  /* [3][0][][] */ -50,-34,23,-6,-21,-127,-98,-21, 
  /* [4][0][][] */ -43,-127,-41,7,54,18,-48,-35, 
  /* [5][0][][] */ 61,-34,75,42,-127,59,-70,-101, 
  /* [6][0][][] */ 43,-127,-57,-28,-10,67,-41,-84, 
  /* [7][0][][] */ -23,-81,-65,-57,74,-127,-4,33, 
  /* [8][0][][] */ 36,72,40,61,37,-37,4,127, 
  /* [9][0][][] */ -23,-49,-47,8,46,-15,127,-15, 
  /* [10][0][][] */ -20,21,-116,28,32,20,107,-127, 
  /* [11][0][][] */ 0,-35,-41,1,-127,25,-2,64, 
  /* [12][0][][] */ 87,64,-22,40,-71,127,90,-16, 
  /* [13][0][][] */ -44,-5,20,-12,37,-127,2,57, 
  /* [14][0][][] */ -92,-50,13,38,16,60,-121,-127, 
  /* [15][0][][] */ 72,90,54,17,-127,42,127,-66, 
  /* [16][0][][] */ 7,-47,12,63,-3,-69,2,-127, 
  /* [17][0][][] */ -76,127,30,-9,-60,-51,-78,-78, 
  /* [18][0][][] */ 117,114,-102,-85,107,104,-53,-127, 
  /* [19][0][][] */ -30,103,-17,-6,-127,13,-74,-96, 
  /* [20][0][][] */ -127,3,4,6,26,26,104,49, 
  /* [21][0][][] */ -30,9,48,29,-76,-127,-126,22, 
  /* [22][0][][] */ -7,-37,-48,-15,-127,6,6,71, 
  /* [23][0][][] */ 62,9,-20,-13,127,63,-82,82, 
  /* [24][0][][] */ 127,17,-47,39,-82,14,18,-10, 
  /* [25][0][][] */ 18,-44,58,111,-47,-127,28,124, 
  /* [26][0][][] */ 14,127,10,53,83,-22,20,-20, 
  /* [27][0][][] */ -114,113,56,-11,127,-76,1,93, 
  /* [28][0][][] */ -66,-65,-60,-31,80,-127,26,-23, 
  /* [29][0][][] */ -70,-24,52,47,127,-105,-75,61, 
  /* [30][0][][] */ 127,55,-127,-117,-83,-99,-86,-63, 
  /* [31][0][][] */ 34,-1,44,80,-127,14,42,1, 
  /* [32][0][][] */ 127,11,57,49,-29,-63,94,53, 
  /* [33][0][][] */ 127,35,-42,6,-111,-79,19,55, 
  /* [34][0][][] */ 53,-9,-26,22,-42,127,19,-77, 
  /* [35][0][][] */ 110,31,-28,-37,24,-100,15,127, 
  /* [36][0][][] */ -37,-40,59,-85,-24,-20,70,-127, 
  /* [37][0][][] */ 81,-66,54,43,101,-8,32,-127, 
  /* [38][0][][] */ 62,127,4,-27,-21,16,25,79, 
  /* [39][0][][] */ 36,-12,-74,73,-36,-56,-87,127, 
  /* [40][0][][] */ -19,-41,2,-22,22,-127,15,49, 
  /* [41][0][][] */ -27,53,-127,-67,98,108,58,-104, 
  /* [42][0][][] */ 36,-32,-58,4,82,127,36,52, 
  /* [43][0][][] */ 13,48,-28,39,-127,-80,64,-72, 
  /* [44][0][][] */ -127,-52,-17,-31,46,58,-111,-65, 
  /* [45][0][][] */ -63,73,-66,23,41,6,-60,127, 
  /* [46][0][][] */ -18,57,127,-17,-46,-55,-65,41, 
  /* [47][0][][] */ -127,-92,-45,-56,91,105,-34,98, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0031496821902692318, 0.0018263920210301876, 0.0019091010326519608, 0.0024982914328575134, 0.0058105001226067543, 0.00088312564184889197, 0.0025554010644555092, 0.0024869022890925407, 0.0011360992211848497, 0.0038840754423290491, 0.001963829854503274, 0.0027181350160390139, 0.0016660366673022509, 0.0027832374908030033, 0.0042229862883687019, 0.0019285110756754875, 0.0025509512051939964, 0.0012739663943648338, 0.0016415086574852467, 0.0039013500791043043, 0.003684693481773138, 0.002338398015126586, 0.0029784904327243567, 0.0025228213053196669, 0.0030413465574383736, 0.0018667649710550904, 0.0022786981426179409, 0.0021589731331914663, 0.0031987247057259083, 0.0018565219361335039, 0.0013586825225502253, 0.0019149560248479247, 0.0033364996779710054, 0.0031634438782930374, 0.0026476702187210321, 0.0027829799801111221, 0.002488377271220088, 0.0012811176711693406, 0.0034195615444332361, 0.0025970882270485163, 0.0012533070985227823, 0.0013607768341898918, 0.0025850844103842974, 0.0024651167914271355, 0.002846673596650362, 0.0022971569560468197, 0.00060244748601689935, 0.0017641441663727164, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 9211, 14922, 5259, 3445, 3020, -12501, 5886, -5493, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00011239713057875633, 0.00012909057841170579, 0.00014287015073932707, 0.000219075518543832, 0.00012171525304438546, 0.00013456073065754026, 8.0892947153188288e-05, 0.00012476467236410826, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 37,-60,117,78,38,-50,26,2,-2,64,-29,14,-54,-91,47,9,-115,67,-42,71,-48,71,6,-23,1,-53,79,-31,-19,29,-28,124,-55,-5,-35,-91,-62,-50,-36,-6,-11,63,-127,11,61,19,22,55, 
  /* [1][0][][] */ -57,-20,49,2,-30,31,-36,-33,43,-9,-3,-36,-18,13,-5,31,-1,14,14,-9,-56,-31,-75,-23,23,-42,-25,-32,25,-73,-1,-127,-9,-55,-64,-71,-39,-80,-22,24,36,-21,81,-102,-52,-10,-30,-4, 
  /* [2][0][][] */ -54,104,-9,38,19,4,30,-48,74,-43,74,96,104,17,36,-56,96,-5,15,25,-6,31,15,122,-124,-40,6,-22,4,80,-17,-86,-23,1,0,-75,-32,5,-37,-15,89,-78,12,3,22,-127,8,-4, 
  /* [3][0][][] */ 49,-21,-48,38,83,-79,12,-121,-24,-5,-47,-73,-32,127,-2,15,-41,-14,-56,-55,29,85,-5,-49,91,39,55,-71,36,-87,53,-59,48,62,95,-70,-51,9,-23,43,20,90,-65,31,-8,17,12,42, 
  /* [4][0][][] */ -49,47,-50,60,91,-30,25,-41,-45,1,-65,29,-48,-15,7,-59,18,65,-30,-39,-51,44,-76,-76,20,-9,21,-29,32,-35,-43,68,-5,72,-71,-81,-63,-68,-43,0,69,-49,127,16,-2,96,-57,-48, 
  /* [5][0][][] */ 56,-8,86,-16,-11,22,49,29,127,-3,74,7,67,55,23,-70,-3,35,29,-44,-57,-67,21,38,16,-9,22,45,-37,-26,8,-13,-22,47,-24,56,43,-6,-34,-44,-5,78,31,41,-22,-2,65,7, 
  /* [6][0][][] */ -7,-82,-8,19,49,-7,-1,3,-45,-16,110,62,87,74,-31,35,116,-127,-15,-2,-16,-31,-106,30,-76,61,-28,-5,-7,-42,69,-46,93,18,-67,-27,-58,5,61,20,68,-78,15,-72,-106,40,-45,22, 
  /* [7][0][][] */ -8,-31,-66,-34,15,100,-3,-10,-6,-64,-127,-95,38,49,-57,-46,-44,17,96,21,-14,-77,58,-1,114,-32,-77,83,-39,-10,-17,-81,-46,72,54,116,82,-53,-21,-38,-18,-13,35,-21,0,-25,8,-65, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0047768778167665005, 0.0054863495752215385, 0.0060719810426235199, 0.0093107093125581741, 0.0051728980615735054, 0.0057188309729099274, 0.0034379502758383751, 0.0053024985827505589, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1837, 1644, 1410, 66, -25, 10497, -46, -4136, -5713, -1229, -8047, 327, -5166, -7755, -552, 254, -10577, 15364, -3357, 1534, 95, 355, -1073, 1097, 23473, -1162, -1653, -598, -205, -1994, 526, -8561, -711, 10402, 2006, 5845, -727, -3456, -2129, -1072, -2705, -498, 2703, 5125, -710, 8650, 2027, -928, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00038744515040889382, 0.00014880164235364646, 0.00072772265411913395, 0.0001308914361288771, 0.00013592120376415551, 0.00027976190904155374, 0.00029849412385374308, 0.00019584569963626564, 0.00036609687958844006, 0.0001473390293540433, 0.0004134687187615782, 0.00023417372722178698, 0.00011419582006055862, 0.00013589202717412263, 0.0002058575046248734, 0.00042014889186248183, 0.00022844721388537437, 8.4236758993938565e-05, 0.00012968183727934957, 0.00033926550531759858, 0.00025368682690896094, 0.00041857484029605985, 0.00022004384663887322, 0.00071042979834601283, 0.00023992618662305176, 0.00034196989145129919, 0.00020992035570088774, 0.00017492378538008779, 0.00020802521612495184, 0.000161509815370664, 0.00050527072744444013, 0.00051053770584985614, 0.00048133713426068425, 0.00013139612565282732, 0.0004179643583483994, 0.00021551703684963286, 0.00020292587578296661, 7.9470381024293602e-05, 0.00035708738141693175, 0.00064208474941551685, 0.00025500688934698701, 0.00082830945029854774, 0.0005929057952016592, 0.00018007458129432052, 0.00018989147793035954, 0.00010657973325578496, 0.00023467403661925346, 0.00029546470614150167, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -3,-39,41,-40,127,-11,-14,-6,-31,52,-1,11,71,25,127,-41,13,-35,-38,-24,-35,-20,-63,25,-127,53,30,-64,-4,24,-18,-4,-32,24,12,2,87,43,37,-8,55,16,-10,-11,-104,-8,-49,-44, 5,-90,-73,-47,-65,-2,33,28,20,-3,62,127,-4,50,-56,127,-9,-75,34,-60,-79,-127,-80,74,-122,-80,23,127,28,33,122,5,-127,-127,-58,36,127,-99,127,11,51,-13,-19,-21,-61,-10,68,-4, 18,-15,-7,127,48,6,-87,1,-21,-42,-15,-22,59,4,-58,-44,39,11,-3,-16,-1,-2,-30,12,-53,-64,-23,43,12,35,-94,-3,15,62,11,16,6,82,-122,5,29,-2,-6,30,-127,2,-65,41, 
  /* [0][1][][] */ -105,-62,127,-16,-42,-47,80,21,20,110,16,12,50,45,101,25,43,-127,71,38,82,-11,57,-39,-21,-13,45,-73,25,58,37,63,37,-83,-3,127,10,26,-34,-114,17,92,-16,-92,36,-94,-69,13, 127,-58,-81,-86,-4,-127,127,127,127,16,127,-45,-127,23,-32,-39,127,-114,127,127,127,80,127,-127,-6,-20,108,-29,127,127,-127,127,32,-124,127,-103,-66,127,-89,122,-127,-127,127,-127,107,-127,127,-126, -2,-95,20,91,-31,-13,-56,12,-12,-127,-24,41,94,20,-51,45,37,-3,-2,12,-9,-27,39,-28,-12,9,-127,69,-70,17,81,23,-9,-89,-26,-47,63,17,123,15,19,57,-41,14,67,-34,-61,127, 
  /* [0][2][][] */ -4,117,22,-48,89,6,-38,-12,-22,18,-3,-2,53,37,78,2,-6,17,-12,-53,-15,10,2,8,-31,-11,38,-20,-57,-98,-11,0,-3,65,-24,33,-54,54,16,116,5,14,0,9,28,-11,-28,-49, -1,95,-54,19,31,-31,3,36,34,10,25,-39,37,127,-76,-78,7,-24,82,-87,-53,77,-2,46,68,127,5,114,-75,-100,-20,-5,93,-96,-94,0,-65,-28,-22,-127,45,-24,-53,88,58,13,6,-1, 15,127,-16,47,39,9,-68,-4,-18,-11,-1,-11,64,9,-62,-4,1,8,-41,-31,-17,3,-4,-4,-60,30,-41,-2,38,-66,15,3,9,61,-4,-23,-41,85,10,6,-29,-7,4,-3,21,-7,-10,24, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.016466418281197548, 0.0063240695744752884, 0.030928213149309158, 0.0055628861300647259, 0.0057766507379710674, 0.011889880523085594, 0.01268600020557642, 0.0083234421908855438, 0.015559117309749126, 0.0062619089148938656, 0.017572419717907906, 0.0099523831158876419, 0.0048533221706748009, 0.0057754111476242542, 0.008748943917453289, 0.017856327816843987, 0.0097090061753988266, 0.0035800621844828129, 0.0055114780552685261, 0.014418783597648144, 0.010781689547002316, 0.017789430916309357, 0.0093518635258078575, 0.030193265527486801, 0.010196862742304802, 0.014533719979226589, 0.0089216148480772972, 0.0074342605657875538, 0.0088410712778568268, 0.0068641672842204571, 0.021474005654454231, 0.021697850897908211, 0.02045682817697525, 0.005584335420280695, 0.017763484269380569, 0.0091594737023115158, 0.0086243497207760811, 0.0033774911426007748, 0.015176213346421719, 0.02728860080242157, 0.010837792418897152, 0.035203151404857635, 0.025198495015501976, 0.0076531697995960712, 0.0080703878775238991, 0.0045296386815607548, 0.0099736461415886879, 0.012557249516248703, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 5093, 1928, 29036, -1699, -602, 5647, -462, 843, 2273, 107, 5540, 771, 2588, 2767, 2867, 2643, 2710, 2419, -566, 3346, 1139, 390, 935, 8825, 20100, 4339, 3112, -1110, -175, 4961, 6931, 9434, 11952, 3199, 5789, -708, 620, 1608, 4817, 4213, 755, 7041, 12338, 3850, 5556, 2312, 3489, 753, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00017571407079230994, 0.00030799303203821182, 4.494608219829388e-05, 0.00025998897035606205, 0.00048210032400675118, 0.00019420961325522512, 0.00029284882475621998, 0.0006583209615200758, 0.0002721500932238996, 0.00039503842708654702, 0.00014938680396880955, 0.000313861935865134, 0.00021986407227814198, 0.0002727893297560513, 0.00020134203077759594, 0.00028242167900316417, 0.00018482808081898838, 0.00021393936185631901, 0.00042058620601892471, 0.00025149300927296281, 0.00033122845343314111, 0.00035304261837154627, 0.00035006928374059498, 0.0001142061228165403, 7.7257791417650878e-05, 0.00020380312344059348, 0.00024886245955713093, 0.00031823720200918615, 0.00057337136240676045, 0.00016744375170674175, 0.00013592596224043518, 0.00010657957318471745, 8.5263804066926241e-05, 0.0002635108248796314, 0.0001588894083397463, 0.00026036484632641077, 0.00029122823616489768, 0.00024224587832577527, 0.0001653477520449087, 0.00019886737572960556, 0.00024366201250813901, 0.00013364935875870287, 9.6062351076398045e-05, 0.00022037004237063229, 0.00016559031791985035, 0.00030246889218688011, 0.00021960666344966739, 0.0003412193909753114, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -5,20,11,-127,-95,15,41,120, 
  /* [1][0][][] */ 110,16,-12,-5,-88,55,127,18, 
  /* [2][0][][] */ -19,127,-42,-29,-53,84,-50,-127, 
  /* [3][0][][] */ 72,-86,-93,106,-127,-44,-2,-37, 
  /* [4][0][][] */ 41,-55,37,-26,-127,7,47,23, 
  /* [5][0][][] */ -14,45,-13,-88,-127,1,-34,9, 
  /* [6][0][][] */ 35,-5,17,23,127,-15,-5,-121, 
  /* [7][0][][] */ 13,38,23,127,23,-8,-2,25, 
  /* [8][0][][] */ 24,32,18,-44,36,127,20,-26, 
  /* [9][0][][] */ 127,50,-9,-12,-64,-49,116,89, 
  /* [10][0][][] */ 3,66,-74,-31,6,127,74,-55, 
  /* [11][0][][] */ -20,-35,-127,96,-64,31,-25,87, 
  /* [12][0][][] */ -110,-95,53,49,36,-127,-51,14, 
  /* [13][0][][] */ 38,26,24,52,-54,127,11,-38, 
  /* [14][0][][] */ 16,-95,-3,-16,-69,-62,-127,97, 
  /* [15][0][][] */ -92,52,-21,14,118,5,-127,-62, 
  /* [16][0][][] */ 85,80,-106,-127,53,127,100,34, 
  /* [17][0][][] */ -106,113,-127,51,-16,-11,16,-112, 
  /* [18][0][][] */ 30,-6,-96,127,-11,-39,-33,-55, 
  /* [19][0][][] */ 127,10,5,17,-24,9,123,38, 
  /* [20][0][][] */ 46,-66,-70,127,42,-22,-21,-56, 
  /* [21][0][][] */ 14,53,127,-117,47,-24,10,-101, 
  /* [22][0][][] */ -67,-36,-127,56,-15,51,17,98, 
  /* [23][0][][] */ 66,20,39,54,-127,92,68,-44, 
  /* [24][0][][] */ -10,-19,-127,97,-55,19,45,81, 
  /* [25][0][][] */ 50,-28,-70,127,59,4,-46,-21, 
  /* [26][0][][] */ -81,29,127,-113,-15,38,58,-1, 
  /* [27][0][][] */ -64,86,127,5,19,-8,76,19, 
  /* [28][0][][] */ -59,-117,44,-127,-12,5,-8,-31, 
  /* [29][0][][] */ -64,-65,-9,83,-20,-127,-11,49, 
  /* [30][0][][] */ -127,50,106,-27,22,35,62,29, 
  /* [31][0][][] */ -56,50,83,-127,-47,18,32,63, 
  /* [32][0][][] */ -72,107,120,-126,33,7,-6,127, 
  /* [33][0][][] */ 12,116,-48,54,31,13,-127,-33, 
  /* [34][0][][] */ 80,20,127,-102,-77,-94,44,-53, 
  /* [35][0][][] */ 76,0,31,102,80,-65,27,-127, 
  /* [36][0][][] */ 19,62,127,-118,29,-31,49,-123, 
  /* [37][0][][] */ -45,-58,101,72,1,-127,83,-10, 
  /* [38][0][][] */ 85,1,98,63,-38,-54,127,24, 
  /* [39][0][][] */ 77,-103,-31,15,-127,7,75,58, 
  /* [40][0][][] */ -49,20,-127,101,-47,41,-87,112, 
  /* [41][0][][] */ -116,-18,-48,5,127,7,-95,8, 
  /* [42][0][][] */ -96,68,-42,-46,121,40,-127,-50, 
  /* [43][0][][] */ 126,121,-30,127,-1,-115,68,77, 
  /* [44][0][][] */ -9,16,70,-2,39,-127,38,-25, 
  /* [45][0][][] */ -13,-89,127,84,-34,-18,-126,19, 
  /* [46][0][][] */ 54,-127,-117,58,-75,32,9,-16, 
  /* [47][0][][] */ -102,-35,38,4,100,39,-127,-52, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026464527472853661, 0.0046387235634028912, 0.00067693885648623109, 0.0039157280698418617, 0.0072609763592481613, 0.0029250166844576597, 0.0044106347486376762, 0.0099150585010647774, 0.004098888486623764, 0.0059497258625924587, 0.0022499342449009418, 0.0047271158546209335, 0.0033114016987383366, 0.0041085160337388515, 0.0030324389226734638, 0.0042535900138318539, 0.0027837201487272978, 0.0032221688888967037, 0.0063345041126012802, 0.0037877694703638554, 0.0049886754713952541, 0.0053172213956713676, 0.005272439680993557, 0.0017200735164806247, 0.0011635897681117058, 0.0030695057939738035, 0.0037481503095477819, 0.0047930125147104263, 0.0086356215178966522, 0.0025218923110514879, 0.0020471988245844841, 0.0016052089631557465, 0.0012841693824157119, 0.003968771081417799, 0.0023930543102324009, 0.0039213891141116619, 0.0043862266466021538, 0.0036484971642494202, 0.0024903242010623217, 0.0029951678588986397, 0.0036698256153613329, 0.0020129105541855097, 0.0014468077570199966, 0.0033190222457051277, 0.0024939775466918945, 0.0045555238611996174, 0.003307524835690856, 0.0051391501910984516, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -11540, 2254, -16645, 1531, 2185, -2630, 9865, 346, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00016472376591991633, 0.00012677950144279748, 8.6930151155684143e-05, 6.0748672694899142e-05, 0.00016747521294746548, 0.00014169135829433799, 0.00011515885125845671, 0.00011509774049045518, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 54,104,-46,67,-3,-5,-23,7,65,-63,6,-28,10,5,-38,-56,-2,-21,26,17,-57,-32,-33,4,13,17,24,-3,22,3,-28,25,-57,13,119,-127,-19,25,-16,112,-34,19,15,-8,-19,41,30,-50, 
  /* [1][0][][] */ -1,-43,36,49,-13,-14,-20,-21,46,-42,94,47,18,10,-47,-77,127,41,13,15,-70,36,37,-10,-45,-90,-34,-52,-12,-65,42,-38,-12,-29,-30,10,3,-20,83,-47,-15,29,-60,39,69,62,21,51, 
  /* [2][0][][] */ 82,-32,-11,-16,108,114,62,75,-35,-5,4,-34,-3,48,59,29,-29,-30,56,-71,-41,-52,-50,59,-89,-96,116,20,59,-70,-65,16,-127,90,106,21,-8,0,-3,12,28,76,19,-65,-22,21,55,-56, 
  /* [3][0][][] */ 81,-33,19,-18,121,123,31,49,-34,-34,23,49,-127,33,72,24,6,3,76,-110,-93,16,34,89,1,-35,56,28,57,-52,2,-7,-121,57,-60,-118,28,-47,66,-49,51,-99,-116,-32,-59,37,-22,69, 
  /* [4][0][][] */ 38,41,-26,-40,-12,-11,-20,-20,6,-7,-4,-9,-32,-19,68,57,-38,-16,-35,43,31,-9,-12,5,-47,-46,-4,49,-16,7,-19,26,-32,-19,29,-127,-11,26,13,57,12,-13,-12,-21,40,-1,91,-19, 
  /* [5][0][][] */ 64,59,-91,51,9,2,-7,29,-77,-52,-57,-21,35,26,45,26,36,-58,41,127,-63,-49,-56,48,34,-21,-37,62,26,32,-50,4,-9,4,-63,0,-14,21,-23,67,15,75,-10,-38,122,28,17,-58, 
  /* [6][0][][] */ -27,-76,17,-44,-45,-42,-80,-80,-38,-61,-119,46,-56,-50,95,96,-127,9,23,-12,17,61,73,12,-12,-8,-77,90,-84,-48,43,81,21,-59,93,42,28,48,-15,-89,-20,-59,-26,13,-44,-17,-4,62, 
  /* [7][0][][] */ 78,19,-16,40,15,14,5,9,85,-13,-17,-23,59,2,-17,-23,-55,-8,-32,-6,-6,-25,-24,-30,66,-127,19,3,5,100,-20,18,-72,25,-53,-43,-9,25,32,24,21,69,-33,-19,-44,34,42,-27, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0070007601752877235, 0.0053881285712122917, 0.003694531274959445, 0.0025818184949457645, 0.0071176961064338684, 0.0060218828730285168, 0.0048942510038614273, 0.004891654010862112, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { -25, 7525, -375, 383, 543, 695, 6447, 7494, 1584, -6289, 417, -96, 6449, 3877, 23624, 16902, -3145, -997, 4635, 5780, 14577, -1199, 772, -319, 9030, 1556, 6595, 18128, 6567, 12628, 492, 3002, -1152, -1384, -4880, 1090, 1696, 232, 629, 3185, 3004, 4180, -6971, 1097, 3, -116, 11670, -1155, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011543415894266218, 0.00013124938413966447, 0.00073617068119347095, 6.5880689362529665e-05, 0.0003830825153272599, 0.00063909334130585194, 0.00015270028961822391, 0.00018327042926102877, 6.4062987803481519e-05, 0.00024070525250863284, 0.00058896688278764486, 0.00038385452353395522, 0.00021168419334571809, 0.0001675367821007967, 5.7280041801277548e-05, 5.361542571336031e-05, 0.00015191866259556264, 0.00049739034147933125, 6.1843493313062936e-05, 8.1638871051836759e-05, 6.7918779677711427e-05, 0.00083576387260109186, 0.0013260325649753213, 0.00026482413522899151, 3.78695476683788e-05, 0.00014849129365757108, 8.3408274804241955e-05, 0.00013183738337829709, 0.00017874957120511681, 0.00015186949167400599, 0.00048858311492949724, 0.00019285632879473269, 9.7003088740166277e-05, 0.00026402203366160393, 7.9397126683034003e-05, 9.4877897936385125e-05, 0.00036930845817551017, 0.00037139782216399908, 0.00011037296644644812, 0.00019379021250642836, 9.7208416264038533e-05, 0.00023002640227787197, 0.00013497899635694921, 0.00037810610956512392, 9.2405171017162502e-05, 0.0003369826590642333, 8.3673250628635287e-05, 0.00064056779956445098, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -15,-84,-101,79,-85,4,-83,-70,64,89,109,-36,1,8,-89,-57,100,-87,33,-60,-21,-99,-44,-78,94,102,-4,-114,1,-50,59,99,57,68,79,11,90,106,44,14,-103,-1,43,42,-42,65,-56,-93, 80,-7,40,67,-127,41,-63,10,105,114,124,69,-10,-58,-127,-108,114,-35,114,-97,-112,127,127,35,127,111,43,-127,-61,-58,-109,107,107,127,111,106,-24,104,72,-74,-72,-79,35,-63,-55,127,-69,110, 114,4,61,71,-78,9,-38,-1,29,69,17,-28,-71,0,-55,-51,35,91,49,-17,-45,-24,-85,71,35,32,18,-49,1,-54,26,25,54,94,23,69,-12,26,43,-7,-41,-14,24,10,-21,48,-34,-3, 
  /* [0][1][][] */ 48,-127,120,92,89,-72,-127,-127,124,75,82,-45,1,-2,-126,-94,101,127,47,-101,-34,115,25,-127,117,127,111,-107,-4,-93,-79,102,105,-8,119,43,29,113,73,4,-10,-17,94,97,-111,108,-90,120, 127,-10,4,127,120,-127,-113,3,127,127,127,60,-37,-127,-120,-127,127,59,127,-127,-127,-117,-113,52,117,127,127,-126,-127,-94,127,127,127,-4,127,127,-12,127,127,-127,12,-127,127,-93,-127,101,-108,-127, 104,0,-127,82,86,-61,-49,-5,13,76,4,-20,-127,-2,-32,-37,43,-104,62,-38,-58,11,75,71,52,56,5,-52,-13,-74,-42,18,41,-7,21,74,-5,23,62,-3,-16,-16,53,-10,-73,13,-53,12, 
  /* [0][2][][] */ 54,-76,7,15,-3,64,-61,-79,43,-4,2,61,8,8,-69,-42,21,-46,22,-82,-5,6,5,-82,26,36,82,0,8,-115,17,14,66,-92,87,8,-127,41,24,3,21,0,80,-127,-70,62,-69,-5, 34,7,6,58,6,89,-10,3,27,40,1,-127,-16,-77,-52,-61,31,-20,26,-110,-27,-8,-29,30,11,39,85,-33,-80,-127,-31,15,68,-100,74,32,14,41,58,-43,127,-51,108,101,-99,21,-127,21, -27,-2,-4,50,-21,36,-18,-1,2,11,-58,42,-74,-3,-14,-10,-4,24,19,-10,-24,24,17,31,13,38,25,11,-5,-54,12,-24,15,-50,12,18,6,-9,31,13,60,-7,23,-5,-19,6,-39,-4, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0049059516750276089, 0.0055780988186597824, 0.031287252902984619, 0.0027999291196465492, 0.0162810068577528, 0.027161465957760811, 0.0064897621050477028, 0.007788992952555418, 0.0027226768434047699, 0.010229973122477531, 0.025031091645359993, 0.016313817352056503, 0.0089965779334306717, 0.0071203131228685379, 0.002434401772916317, 0.0022786555346101522, 0.0064565432257950306, 0.021139089018106461, 0.0026283485349267721, 0.003469651797786355, 0.0028865481726825237, 0.035519964993000031, 0.056356385350227356, 0.011255025863647461, 0.0016094556776806712, 0.0063108797185122967, 0.0035448516719043255, 0.0056030885316431522, 0.007596856914460659, 0.0064544533379375935, 0.020764783024787903, 0.0081963939592242241, 0.0041226311586797237, 0.011220935732126236, 0.0033743777312338352, 0.00403231056407094, 0.015695609152317047, 0.015784407034516335, 0.0046908510848879814, 0.0082360841333866119, 0.0041313576512038708, 0.0097761219367384911, 0.005736607126891613, 0.016069509088993073, 0.0039272196590900421, 0.014321762137115002, 0.0035561129916459322, 0.027224130928516388, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 9446, 3691, 10344, 2470, 3169, 3258, -3366, 3757, 2435, -2238, -3331, 4509, -2735, -3659, 6575, 1379, -1842, 1064, -1658, 2632, 590, 3650, -282, -2117, -494, -4276, 2170, -3724, 3423, 6397, 274, 231, 6242, 7640, 7742, 3597, 3172, -3578, 872, 3667, -681, -3842, 3611, 1428, 93, -5213, -9422, 1078, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00050744396867230535, 0.00083967653336003423, 0.00010936494800262153, 0.00088393629994243383, 0.00070067192427814007, 0.00060799380298703909, 0.0025281908456236124, 0.0013119970681145787, 0.0011137737892568111, 0.00062944169621914625, 0.00015773283666931093, 0.00060372002189978957, 0.00058920768788084388, 0.0013778625288978219, 0.00061596464365720749, 0.0018399084219709039, 0.0010519529459998012, 0.00037199133657850325, 0.0013439354952424765, 0.0022643462289124727, 0.00089477567235007882, 0.00059304374735802412, 0.00017184023454319686, 0.000635078817140311, 0.001495643169619143, 0.0010849017417058349, 0.0012679256033152342, 0.00051581359002739191, 0.0013190362369641662, 0.00082544091856107116, 0.00036079229903407395, 0.00060647609643638134, 0.00096032221335917711, 0.00038987811421975493, 0.00050680432468652725, 0.00048118570703081787, 0.00080343306763097644, 0.0019088048720732331, 0.00064161559566855431, 0.00085381272947415709, 0.0017009812872856855, 0.00085081846918910742, 0.00092469545779749751, 0.00028923354693688452, 0.0017112515633925796, 0.00085590826347470284, 0.00085691275307908654, 0.00077258527744561434, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -101,-108,25,-127,-64,-3,-3,3, 
  /* [1][0][][] */ -127,-10,92,-3,-45,29,2,14, 
  /* [2][0][][] */ 24,-12,24,127,26,-25,-13,-8, 
  /* [3][0][][] */ -113,-78,-26,-20,43,127,-50,-39, 
  /* [4][0][][] */ -6,-28,-6,-3,-11,5,-127,-70, 
  /* [5][0][][] */ -1,-39,-12,-3,-9,13,-127,-78, 
  /* [6][0][][] */ 127,7,17,-12,-71,15,1,-6, 
  /* [7][0][][] */ -127,-32,-13,4,69,13,1,8, 
  /* [8][0][][] */ 23,38,-12,-15,-31,-127,40,19, 
  /* [9][0][][] */ 76,22,-15,-9,-23,-2,-6,127, 
  /* [10][0][][] */ 121,-13,-123,15,-90,-10,49,127, 
  /* [11][0][][] */ -127,102,5,-43,89,-69,11,21, 
  /* [12][0][][] */ 127,-41,-110,10,52,3,-9,-20, 
  /* [13][0][][] */ 127,3,11,-17,-24,25,6,-11, 
  /* [14][0][][] */ -118,-78,96,-26,69,-18,-32,-127, 
  /* [15][0][][] */ 34,76,2,-7,-7,-127,-15,5, 
  /* [16][0][][] */ -9,-62,9,7,13,127,11,6, 
  /* [17][0][][] */ 37,-127,-59,18,-29,125,-52,-16, 
  /* [18][0][][] */ 39,-20,-16,-15,-19,28,127,-13, 
  /* [19][0][][] */ -6,27,1,-127,-11,34,-3,-12, 
  /* [20][0][][] */ -82,-38,84,12,53,95,-11,-127, 
  /* [21][0][][] */ -25,-5,31,-26,-19,11,-127,-83, 
  /* [22][0][][] */ 69,-5,2,127,-18,-1,55,39, 
  /* [23][0][][] */ 127,-8,-105,-17,31,-32,10,5, 
  /* [24][0][][] */ -30,25,26,40,13,2,-127,-85, 
  /* [25][0][][] */ 127,12,-85,9,16,-5,7,24, 
  /* [26][0][][] */ 2,55,-30,-127,-27,23,2,-2, 
  /* [27][0][][] */ 127,18,-106,8,-100,52,23,75, 
  /* [28][0][][] */ -127,-26,-21,15,54,7,-2,31, 
  /* [29][0][][] */ -7,-127,-15,-122,-12,29,-17,-17, 
  /* [30][0][][] */ 9,79,127,26,41,-95,114,26, 
  /* [31][0][][] */ -87,-9,-127,56,-13,-22,109,109, 
  /* [32][0][][] */ -3,-115,-2,-127,-7,9,-10,-22, 
  /* [33][0][][] */ 12,-127,-6,-96,4,15,0,-17, 
  /* [34][0][][] */ -33,-66,34,-103,28,-61,127,95, 
  /* [35][0][][] */ -127,15,52,7,-106,-20,31,88, 
  /* [36][0][][] */ -127,20,115,10,-26,30,-11,19, 
  /* [37][0][][] */ 127,9,-6,-12,-75,18,-2,18, 
  /* [38][0][][] */ -84,4,96,33,58,-47,58,127, 
  /* [39][0][][] */ -127,-5,70,-1,-65,20,-9,4, 
  /* [40][0][][] */ -5,26,42,-14,26,-9,127,44, 
  /* [41][0][][] */ 127,-17,-76,4,51,18,6,-5, 
  /* [42][0][][] */ -14,-127,30,-10,17,2,-6,-19, 
  /* [43][0][][] */ 0,127,126,-13,43,-94,71,14, 
  /* [44][0][][] */ 6,-9,-2,114,1,-127,-1,2, 
  /* [45][0][][] */ 127,-33,35,-8,-64,104,5,5, 
  /* [46][0][][] */ 16,109,-23,103,3,127,19,38, 
  /* [47][0][][] */ -8,36,6,-27,32,-29,127,68, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0054956618696451187, 0.0090937688946723938, 0.0011844317195937037, 0.0095731057226657867, 0.0075883371755480766, 0.0065846247598528862, 0.027380524203181267, 0.014209040440618992, 0.012062265537679195, 0.0068169073201715946, 0.0017082601552829146, 0.0065383394248783588, 0.006381169892847538, 0.0149223692715168, 0.0066709499806165695, 0.019926365464925766, 0.011392740532755852, 0.0040286979638040066, 0.014554936438798904, 0.024523062631487846, 0.0096904970705509186, 0.0064227147959172726, 0.0018610444385558367, 0.0068779578432440758, 0.016197944059967995, 0.011749578639864922, 0.013731742277741432, 0.005586305633187294, 0.014285275712609291, 0.0089395958930253983, 0.0039074113592505455, 0.0065681883133947849, 0.010400371626019478, 0.0042224135249853134, 0.0054887342266738415, 0.0052112825214862823, 0.0087012490257620811, 0.020672520622611046, 0.0069487518630921841, 0.0092468652874231339, 0.018421772867441177, 0.0092144366353750229, 0.010014531202614307, 0.003132424084469676, 0.018533000722527504, 0.0092695597559213638, 0.0092804385349154472, 0.0083671649917960167, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 4046, -4610, -370, 2960, 2030, 208, -2458, 2548, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.7704564318992198e-05, 0.00015453268133569509, 8.3041915786452591e-05, 7.0873320510145277e-05, 0.00014683791960123926, 0.00019985561084467918, 0.00010871591803152114, 0.0002045792352873832, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -26,0,-51,-40,-20,40,-127,-9, 
  /* [1][0][][] */ 20,89,4,127,10,-8,-8,-36, 
  /* [2][0][][] */ 127,0,-35,-54,-71,52,99,-55, 
  /* [3][0][][] */ 12,-127,36,-73,17,-80,23,57, 
  /* [4][0][][] */ 120,-7,-62,-5,26,-3,-127,-44, 
  /* [5][0][][] */ 3,-37,1,39,3,-127,-3,11, 
  /* [6][0][][] */ 124,-27,127,-4,104,-38,0,3, 
  /* [7][0][][] */ -127,-5,-90,-8,-100,4,35,1, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0033024440053850412, 0.0065676388330757618, 0.0035292813554406166, 0.0030121160671114922, 0.0062406114302575588, 0.008493863046169281, 0.0046204263344407082, 0.0086946170777082443, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10552, 12553, 203, -13695, -469, -12245, 133, 98, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00034784743911586702, 0.00040751969208940864, 0.00031164928805083036, 0.00044281122973188758, 0.00064540741732344031, 0.000352423609001562, 0.0016653451602905989, 0.0027603826019912958, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -1,-2,24,17,11,-3,9,34, 8,0,-25,127,-22,-2,-4,35, -3,-2,-9,14,-2,1,-6,25, 
  /* [0][1][][] */ -6,-5,127,-21,127,-1,-111,47, 127,-127,-85,11,-90,127,-14,-127, -26,0,16,-20,-3,5,127,44, 
  /* [0][2][][] */ 0,-3,16,4,6,-5,16,38, 1,0,-32,-1,-14,0,-9,-103, -4,-1,-7,0,-4,-3,-5,44, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.014783515594899654, 0.017319586127996445, 0.013245094567537308, 0.018819477409124374, 0.027429815381765366, 0.014978003688156605, 0.070777170360088348, 0.11731626093387604, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 4210, 5823, -1241, 22562, 1340, 6125, 89269, -1423, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00062684831209480762, 0.00035868081613443792, 0.00021976232528686523, 0.00012044910545228049, 0.00032190573983825743, 0.00038027614937163889, 1.2660418178711552e-05, 7.9060358984861523e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 46, -1, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 5, 
  /* [2][0][][] */ 32, 29, -46, 
  /* [2][1][][] */ 53, 70, -127, 
  /* [2][2][][] */ 22, 33, -58, 
  /* [3][0][][] */ 42, 52, 20, 
  /* [3][1][][] */ 52, 73, 25, 
  /* [3][2][][] */ -81, -127, -58, 
  /* [4][0][][] */ 5, -53, 48, 
  /* [4][1][][] */ 17, -127, 113, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -18, -91, 0, 
  /* [6][1][][] */ -20, -127, -5, 
  /* [6][2][][] */ -5, -41, 9, 
  /* [7][0][][] */ 53, -127, 43, 
  /* [7][1][][] */ -17, 1, -3, 
  /* [7][2][][] */ -23, 82, -6, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.16041058301925659, 0.091786473989486694, 0.056237213313579559, 0.030822943896055222, 0.082375727593898773, 0.097312726080417633, 0.0032398030161857605, 0.020231558009982109, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.081213228404521942, } };
const TfArray<1, int> quant46_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.092335373163223267, } };
const TfArray<1, int> quant47_zero = { 1, { 15 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.066396072506904602, } };
const TfArray<1, int> quant51_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.0937613844871521, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.098552480340003967, } };
const TfArray<1, int> quant55_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.049021843820810318, } };
const TfArray<1, int> quant59_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019468281418085098, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023427940905094147, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.03640349954366684, } };
const TfArray<1, int> quant62_zero = { 1, { -30 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.063990131020545959, } };
const TfArray<1, int> quant63_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.021742990240454674, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.052537184208631516, } };
const TfArray<1, int> quant66_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.080383017659187317, } };
const TfArray<1, int> quant67_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.045619752258062363, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.1485755443572998, } };
const TfArray<1, int> quant70_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_13_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_13_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
